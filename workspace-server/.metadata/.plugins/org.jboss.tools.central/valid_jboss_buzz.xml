<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Announcing the Red Hat OpenShift extension for Visual Studio Code: Public Preview</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-rjfT8pvOUY/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="OpenShift Connector" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="Visual Studio Code" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><author><name>Mohit Suman</name></author><id>searchisko:content:id:jbossorg_blog-announcing_the_red_hat_openshift_extension_for_visual_studio_code_public_preview</id><updated>2018-11-28T14:00:02Z</updated><published>2018-11-28T14:00:02Z</published><content type="html">&lt;p&gt;We are extremely pleased to announce that the preview release of the &lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt; extension for Visual Studio Code is now available. You can download the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector"&gt;OpenShift Connector&lt;/a&gt; extension from the marketplace or install it directly from the extension gallery in Visual Studio Code.&lt;/p&gt; &lt;p&gt;This article provides describes the features and benefits of the extension and provides installation details. It also provides a demo of how using the extension improves the end-to-end experience of developing and deploying Spring Boot applications to local OpenShift cluster.&lt;/p&gt; &lt;h2&gt;&lt;span id="more-537657"&gt;&lt;/span&gt;&lt;/h2&gt; &lt;h2&gt;Benefits of using the extension&lt;/h2&gt; &lt;p&gt;&lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt; is a container application platform that brings the power of &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;containers&lt;/a&gt; to the enterprise. Regardless of the applications architecture, OpenShift lets you easily and quickly build, develop, and deploy in nearly any infrastructure, public or private.&lt;/p&gt; &lt;p&gt;Therefore, whether it’s on-premises, in a public cloud, or hosted, you have an award-winning platform to get your next big idea to market ahead of your competition.&lt;/p&gt; &lt;p&gt;Using OpenShift Connector, you can interact with Red Hat OpenShift using a local instance of OpenShift clusters such as minishift/&lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt;. Leveraging the OpenShift Application Explorer view, you can improve the end-to-end experience of developing applications.&lt;/p&gt; &lt;p&gt;The extension enables you to perform all this directly using Visual Studio Code and removes the complexity of memorizing some fairly complicated CLI commands.&lt;/p&gt; &lt;h2&gt;Developer use-case&lt;/h2&gt; &lt;p&gt;On a developer workstation, when you load a Spring Boot project, the language support detection automatically proposes to load a Spring Boot language support extension and suggests downloading and installing the OpenShift Connector. You can install the recommended extension in Visual Studio Code.&lt;/p&gt; &lt;p&gt;Therefore, once the OpenShift Connector is installed, OpenShift Application View is enabled on the Explorer panel in Visual Studio Code. Then, you can access the view and connect to a running OpenShift cluster and perform the required operations.&lt;/p&gt; &lt;h2&gt;Demo&lt;/h2&gt; &lt;p&gt;Here is a working &lt;a href="https://www.youtube.com/watch?v=XIHLbUvGuFM" target="_blank" rel="noopener"&gt;demo &lt;/a&gt;of the end-to-end experience of developing and deploying Spring Boot applications to a local OpenShift cluster using the extension. This demo aims to simplify the OpenShift experience for Visual Studio developers. For detailed installation and usage information, please refer to the &lt;a href="https://github.com/redhat-developer/vscode-openshift-tools/blob/master/README.md"&gt;readme&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/XIHLbUvGuFM?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;:&lt;em&gt; In this Preview release, we support only Java and Node.JS components. We will be supporting other languages in future releases.&lt;/em&gt;&lt;/p&gt; &lt;h2 id="installation"&gt;Installation&lt;/h2&gt; &lt;p&gt;First, you will need to install &lt;a title="https://code.visualstudio.com/download" href="https://code.visualstudio.com/download"&gt;Visual Studio Code&lt;/a&gt; 1.12.0 or later.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;To install the extension with the latest version of Visual Studio Code, bring up the Visual Studio Code Command Palette (press F1).&lt;/li&gt; &lt;li&gt;Type &lt;code&gt;install&lt;/code&gt; and &lt;strong&gt;choose Extensions: Install Extensions&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;In the&lt;strong&gt; Search Extensions in Marketplace&lt;/strong&gt; text box, type &lt;code&gt;OpenShift&lt;/code&gt;. Find the &lt;code&gt;OpenShift Connector&lt;/code&gt; extension published by Red Hat and click the&lt;strong&gt; Install&lt;/strong&gt; button.&lt;/li&gt; &lt;li&gt;Subsequently, you should reload Visual Studio Code and there will be an OpenShift Icon in the Explorer View.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/openshift-extension-installation.gif"&gt;&lt;img class="attachment-266x266 aligncenter" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/openshift-extension-installation.gif" alt="OpenShift Connector installation demo" width="975" height="580" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Dependencies&lt;/h2&gt; &lt;p&gt;This extension uses two CLI tools to interact with an OpenShift cluster:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The OpenShift client tool: &lt;a href="https://github.com/openshift/origin/releases" target="_blank" rel="noopener"&gt;oc&lt;/a&gt;&lt;/li&gt; &lt;li&gt;The OpenShift Do tool: &lt;a href="https://github.com/redhat-developer/odo/releases" target="_blank" rel="noopener"&gt;odo&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;oc&lt;/code&gt; and &lt;code&gt;odo&lt;/code&gt; are located in a directory contained in your PATH, they will be used automatically. If they aren&amp;#8217;t present in your PATH, the extension will prompt you to download and install them.&lt;/p&gt; &lt;h2&gt;The extension in action&lt;/h2&gt; &lt;h3&gt;Connecting to your OpenShift instance&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Start the local OpenShift instance using minishift/&lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;After the extension is installed in Visual Studio Code, it will prompt you to download the required dependencies (&lt;code&gt;oc&lt;/code&gt;, &lt;code&gt;odo&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;The OpenShift Application Explorer view is activated once you click the OpenShift icon in the Explorer View.&lt;/li&gt; &lt;li&gt;You then need to log in to the running OpenShift cluster ( &lt;img class=" alignnone wp-image-540777 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/login-dark.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/login-dark.png" alt="" width="12" height="12" /&gt; &amp;#8211; Log in to Cluster).&lt;/li&gt; &lt;li&gt;Provide the cluster URL to connect to the running instance of OpenShift.&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.12.43-AM.png"&gt;&lt;img class=" alignnone wp-image-540787 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.12.43-AM-1024x415.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.12.43-AM.png" alt="logging in to OpenShift" width="845" height="343" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.12.43-AM.png 3225w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.12.43-AM-300x122.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.12.43-AM-768x311.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.12.43-AM-1024x415.png 1024w" sizes="(max-width: 845px) 100vw, 845px" /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Now you can log in to the server using the following methods : &lt;ul&gt; &lt;li&gt;Credentials: Log in to the given server with the given credentials (basic auth).&lt;/li&gt; &lt;li&gt;Token: Log in to the given server with the given credentials (token).&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p style="padding-left: 60px;"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.22.06-AM.png"&gt;&lt;img class=" alignnone wp-image-540807 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.22.06-AM-1024x171.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.22.06-AM.png" alt="OpenShift login options" width="748" height="125" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.22.06-AM.png 1482w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.22.06-AM-300x50.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.22.06-AM-768x129.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-26-at-1.22.06-AM-1024x171.png 1024w" sizes="(max-width: 748px) 100vw, 748px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p style="padding-left: 30px;"&gt;7. OpenShift Application Explorer will display the OpenShift cluster in the Tree View.&lt;/p&gt; &lt;p style="padding-left: 30px;"&gt;8. Now you can perform the necessary operations in the connected cluster from the extension directly without looking back and forth to the command line.&lt;/p&gt; &lt;h3&gt;Working with OpenShift&lt;/h3&gt; &lt;p&gt;Once the extension is connected to the OpenShift clusters, you can perform operations in OpenShift and build/deploy applications. Note:  &lt;em&gt;This extension currently supports a local OpenShift cluster running using &lt;a href="https://github.com/minishift/minishift/releases" target="_blank" rel="noopener"&gt;minishift&lt;/a&gt; or &lt;a href="https://developers.redhat.com/products/cdk/download/" target="_blank" rel="noopener"&gt;Red Hat Container Development Kit&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;h4&gt;Actions available inside an OpenShift cluster&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;OpenShift: List catalog components&lt;/code&gt; – Lists all available component types from OpenShift&amp;#8217;s Image Builder.&lt;/li&gt; &lt;li&gt;&lt;code&gt;OpenShift: List catalog services&lt;/code&gt; – Lists all available services, for example, MySQL.&lt;/li&gt; &lt;li&gt;&lt;code&gt;OpenShift: New Project&lt;/code&gt; – Creates a new project inside the cluster.&lt;/li&gt; &lt;li&gt;&lt;code&gt;OpenShift: About&lt;/code&gt; – Provides information about the OpenShift tools.&lt;/li&gt; &lt;li&gt;&lt;code&gt;OpenShift: Log out&lt;/code&gt; – Logs out of the current OpenShift cluster.&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Actions available for a project&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;Project -&amp;#62; New Application&lt;/code&gt; – Creates a new application inside the selected project.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Project -&amp;#62; Delete&lt;/code&gt; – Deletes an existing project.&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Actions available for an application inside a project&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;Application -&amp;#62; New Component&lt;/code&gt; – Creates a new component inside the selected application. &lt;ul&gt; &lt;li&gt;git – Use a git repository as the source file for the component.&lt;/li&gt; &lt;li&gt;local – Use a local directory as a source file for the component.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;Application -&amp;#62; New Service&lt;/code&gt; – Performs service catalog operations.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Application -&amp;#62; Describe&lt;/code&gt; – Describes the given application in a terminal window.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Application -&amp;#62; Delete&lt;/code&gt; – Deletes an existing application.&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Actions available for a component in an application&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Create URL&lt;/code&gt; – Exposes a component to the outside world. The URLs that are generated using this command can be used to access the deployed components from outside the cluster.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Create Storage&lt;/code&gt; – Creates storage and mounts to a component.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Show Log&lt;/code&gt; – Retrieves the log for the given component.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Follow Log&lt;/code&gt; – Follows logs for the given component.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Open in Browser&lt;/code&gt; – Opens the exposed URL in a browser.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Push&lt;/code&gt; – Pushes source code to a component.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Watch&lt;/code&gt; – Watches for changes and updates component upon change.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Describe&lt;/code&gt; – Describes the given component in a terminal window.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Component -&amp;#62; Delete&lt;/code&gt; – Deletes an existing component.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Contributions and Feedback&lt;/h2&gt; &lt;p&gt;This is an open source project and we welcome contributions and suggestions. Follow these &lt;a href="https://github.com/redhat-developer/vscode-openshift-tools/blob/master/CONTRIBUTING.md"&gt;contributing&lt;/a&gt; guidelines for more details.&lt;/p&gt; &lt;p&gt;We are excited for you to give &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector"&gt;OpenShift Connector&lt;/a&gt; a try! In addition, any feedback to further improve the developer experience using OpenShift on Visual Studio Code is welcome.&lt;/p&gt; &lt;p&gt;Please reach out to us if you have any questions, encounter any issues, or have feature requests.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Have thoughts on how we can make the extension better? Simply &lt;a href="https://github.com/redhat-developer/vscode-openshift-tools/issues"&gt;open a new issue&lt;/a&gt;!&lt;/li&gt; &lt;li&gt;For more discussions, chat with us on &lt;a href="https://chat.openshift.io/developers/channels/adapters"&gt;Mattermost&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Happy Collaborating,&lt;br /&gt; Red Hat Developer Tools Team&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#38;linkname=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fannouncing-red-hat-openshift-extension-for-visual-studio-code-public-preview%2F&amp;#038;title=Announcing%20the%20Red%20Hat%20OpenShift%20extension%20for%20Visual%20Studio%20Code%3A%20Public%20Preview" data-a2a-url="https://developers.redhat.com/blog/2018/11/28/announcing-red-hat-openshift-extension-for-visual-studio-code-public-preview/" data-a2a-title="Announcing the Red Hat OpenShift extension for Visual Studio Code: Public Preview"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/28/announcing-red-hat-openshift-extension-for-visual-studio-code-public-preview/"&gt;Announcing the Red Hat OpenShift extension for Visual Studio Code: Public Preview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-rjfT8pvOUY" height="1" width="1" alt=""/&gt;</content><summary>We are extremely pleased to announce that the preview release of the Red Hat OpenShift extension for Visual Studio Code is now available. You can download the OpenShift Connector extension from the marketplace or install it directly from the extension gallery in Visual Studio Code. This article provides describes the features and benefits of the extension and provides installation details. It also...</summary><dc:creator>Mohit Suman</dc:creator><dc:date>2018-11-28T14:00:02Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/28/announcing-red-hat-openshift-extension-for-visual-studio-code-public-preview/</feedburner:origLink></entry><entry><title>How integration is key to customer experience (Part 1)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BM2EQFXYLLQ/" /><category term="Agile Integration" scheme="searchisko:content:tags" /><category term="Architecture" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Customer Experience" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat Customers" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_integration_is_key_to_customer_experience_part_1</id><updated>2018-11-28T12:00:09Z</updated><published>2018-11-28T12:00:09Z</published><content type="html">&lt;p&gt;For the past few months, I&amp;#8217;ve been digging into my new role with a group of Portfolio Architects, looking specifically at integration as the key to omnichannel customer experience.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s an interesting challenge in that we&amp;#8217;ve been given the mission of creating architectural content based on common customer adoption patterns. That&amp;#8217;s very different from most of the traditional marketing activities usually associated with generating content for the sole purpose of positioning products for solutions. When you&amp;#8217;re basing the content on actual execution in solution delivery, you&amp;#8217;re cutting out the &lt;i&gt;chuff. &lt;/i&gt;&lt;/p&gt; &lt;p&gt;What&amp;#8217;s that mean?&lt;/p&gt; &lt;p&gt;It means that it&amp;#8217;s going to provide you with a way to implement a solution using open source technologies by focusing on the integrations, structures, and interactions that actually have been proven to work.&lt;/p&gt; &lt;p&gt;What&amp;#8217;s not included is any vendor promises that you&amp;#8217;ll find in normal marketing content: those promises that, when it gets down to implementation crunch time, might not fully deliver.&lt;/p&gt; &lt;p&gt;Enter the term &lt;i&gt;architectural blueprint. &lt;/i&gt;&lt;/p&gt; &lt;p&gt;In this series of articles, let&amp;#8217;s look at these blueprints, how they are created, and what value they provide for your solution designs.&lt;/p&gt; &lt;p&gt;&lt;span id="more-536947"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;The process&lt;/h3&gt; &lt;p&gt;The first step is to decide the use case to start with, which in my case had to be linked to a higher-level theme that becomes the leading focus. This higher-level theme is not quite boiling the ocean, but it&amp;#8217;s so broad that it&amp;#8217;s going to require some division into smaller parts.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ve settled on the higher-level theme being &lt;i&gt;&amp;#8216;migrating applications to &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;containers&lt;/a&gt;,&amp;#8217;&lt;/i&gt; which gives me the latitude to break it down as follows in no particular order:&lt;/p&gt; &lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-OuoS8hlKSyM/W-AkHk6QCSI/AAAAAAAAtP0/-iGa-x9vfoYxffvXHDmguo3DkBULzFGwACLcBGAs/s1600/coworkers-looking-at-mobile-device_4460x4460.jpg"&gt;&lt;img class="alignright" src="https://1.bp.blogspot.com/-OuoS8hlKSyM/W-AkHk6QCSI/AAAAAAAAtP0/-iGa-x9vfoYxffvXHDmguo3DkBULzFGwACLcBGAs/s320/coworkers-looking-at-mobile-device_4460x4460.jpg" alt="omnichannel customer experience" width="320" height="213" border="0" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Omnichannel customer experience&lt;/li&gt; &lt;li&gt;Agile integration for cloud-native applications&lt;/li&gt; &lt;li&gt;APIs for customer and partner ecosystems&lt;/li&gt; &lt;li&gt;Multiple SaaS integration across hybrid environments&lt;/li&gt; &lt;li&gt;Application modernization&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first case I&amp;#8217;m tackling is &lt;i&gt;omnichannel customer experience&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The approach taken is to research our existing customers who have implemented solutions in this space, collect their public-facing content, research the internal implementation documentation collections from their successful engagements, and where necessary reach out to the field resources involved.&lt;/p&gt; &lt;h3&gt;What&amp;#8217;s next&lt;/h3&gt; &lt;p&gt;The resulting content targets the following three items:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A slide deck of the architectural blueprint for use that tells the portfolio solution story.&lt;/li&gt; &lt;li&gt;A generic architectural diagram providing the general details for the portfolio solution.&lt;/li&gt; &lt;li&gt;A write-up of the portfolio solution in a &amp;#8220;solution brief&amp;#8221; format.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;An overview of the series on the omnichannel customer experience portfolio architecture blueprint can be found here:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;An introduction (This article)&lt;/li&gt; &lt;li&gt;Common architectural elements for modern integration architectures&lt;/li&gt; &lt;li&gt;Details of specific elements (external apps, API gateways, container platform storage services)&lt;/li&gt; &lt;li&gt;Application integration details&lt;/li&gt; &lt;li&gt;Dissecting several specific application integration architectures&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Catch up on any articles you missed by following one of the links above.&lt;/p&gt; &lt;p&gt;Next in this series, I&amp;#8217;ll be taking a look at the generic common architecture for omnichannel customer experience.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#38;linkname=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F28%2Fintegration-is-key-to-customer-experience%2F&amp;#038;title=How%20integration%20is%20key%20to%20customer%20experience%20%28Part%201%29" data-a2a-url="https://developers.redhat.com/blog/2018/11/28/integration-is-key-to-customer-experience/" data-a2a-title="How integration is key to customer experience (Part 1)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/28/integration-is-key-to-customer-experience/"&gt;How integration is key to customer experience (Part 1)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BM2EQFXYLLQ" height="1" width="1" alt=""/&gt;</content><summary>For the past few months, I’ve been digging into my new role with a group of Portfolio Architects, looking specifically at integration as the key to omnichannel customer experience. It’s an interesting challenge in that we’ve been given the mission of creating architectural content based on common customer adoption patterns. That’s very different from most of the traditional marketing activities us...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-11-28T12:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/28/integration-is-key-to-customer-experience/</feedburner:origLink></entry><entry><title>What, No Python in RHEL 8 Beta?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-aFPcivt8q8/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Langdon White</name></author><id>searchisko:content:id:jbossorg_blog-what_no_python_in_rhel_8_beta</id><updated>2018-11-27T15:00:04Z</updated><published>2018-11-27T15:00:04Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;TL;DR Of course we have Python! You just need to specify if you want Python 3 or 2 as we didn’t want to set a default. Give &lt;code&gt;yum install python3&lt;/code&gt; or &lt;code&gt;yum install python2&lt;/code&gt; a try. Or, if you want to see what we recommend you install &lt;code&gt;yum install @python36&lt;/code&gt; or &lt;code&gt;yum install @python27&lt;/code&gt;. Read on for why.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For prior versions of &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;Red Hat Enterprise Linux&lt;/a&gt;, and most &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt; Distributions, users have been locked to the system version of Python unless they got away from the system package manager. While this can be true for a lot of tools (ruby: rvm; node: nvm) the Python use case is worse because so many Linux tools (like yum) rely on Python.&lt;/span&gt;&lt;span id="more-535767"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In order to improve this experience for RHEL8 users, we have moved the Python &lt;a href="https://developers.redhat.com/blog/2018/11/14/python-in-rhel-8/"&gt;used by the system “off to the side&amp;#8221;&lt;/a&gt;. In RHEL 8 we also introduced Modularity. As a result, in combination with Python’s ability to be parallel installed, we can now make multiple versions of Python available and installable, from the standard repositories, installing to the standard locations. Now, users can choose what version of Python they want to run in any given userspace and it simply works. For more info, see my article, &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;&lt;em&gt;Introducing Application Streams in RHEL 8&lt;/em&gt;&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;To be honest, the system maintainers also get some advantages of not being locked to an aging version of Python for our system tools. With users not relying on a particular version of Python coming with the system installation, we have the freedom to take advantage of new language features, performance improvements, and all the other goodness a developer gets when tracking near the upstream version.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;However, this has resulted in a dilemma. When a user sits down at a fresh installation of RHEL8 they will naturally expect that &lt;code&gt;/usr/bin/python&lt;/code&gt; will run some version of Python. If you follow the recommendation in &lt;a href="https://www.python.org/dev/peps/pep-0394/"&gt;Python Enhancement Proposal (PEP) 394&lt;/a&gt;, that will be Python 2. However, at some point, a new PEP will likely want to change that recommendation to Python 3, &lt;em&gt;probably during, the typically *10* year, life of RHEL 8!&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;So, what do we do? Well, if we follow the current recommendation, we make some present day users happy. However, when the Python Community shifts to recommending Python 3 as the default, we will make new users unhappy.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;As a result, we came to the tough conclusion, don’t provide bare Python at all. Instead, ask our users from the beginning to choose which version of Python they actually want. So, &lt;code&gt;yum install python&lt;/code&gt; results in a 404.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;However, we do try to make it as easy as possible to get Python 2 or 3 (or both) on to your system. We recommend using &lt;code&gt;yum install @python36&lt;/code&gt; or &lt;code&gt;yum install @python27&lt;/code&gt; to take advantage of the recommended set of packages to install. If you really want *just* the Python binary, you can use &lt;code&gt;yum install python3&lt;/code&gt; or &lt;code&gt;yum install python2&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We have also setup the alternatives infrastructure so that when you install either (or both) you can easily make /usr/bin/python point to the right place using &lt;code&gt;alternatives --config python&lt;/code&gt;. However, as we explained above, and aligned with the Python PEP, we don’t recommend relying on /usr/bin/python being the correct python for your application.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;To conclude, yes, Python is included in RHEL 8! And, it will be even better than in the past! If you want more details on anything in this post, please see the &lt;a href="https://wp.me/p8e0as-2fn5"&gt;How To Guide&lt;/a&gt; on Red Hat Developers.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Oh and if you haven&amp;#8217;t downloaded RHEL 8 yet—go to &lt;a href="https://developers.redhat.com/rhel8/"&gt;developers.redhat.com/rhel8&lt;/a&gt; now.&lt;/strong&gt;&lt;/p&gt; &lt;h2&gt;Additional Information&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/rhel8/"&gt;Red Hat Enterprise Linux 8 Beta for developers&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;Introducing Application Streams in RHEL 8&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://wp.me/p8e0as-2fsJ"&gt;Petr Viktorin&amp;#8217;s Python on RHEL 8 article&lt;/a&gt; (see the discussion of Platform Python)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/15/introducing-codeready-linux-builder/" rel="bookmark"&gt;Introducing CodeReady Linux Builder&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/20/buildah-podman-containers-without-daemons/"&gt;Containers without daemons: Podman and Buildah available in RHEL 7.6 and RHEL 8 Beta&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#38;linkname=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fwhat-no-python-in-rhel-8-beta%2F&amp;#038;title=What%2C%20No%20Python%20in%20RHEL%208%20Beta%3F" data-a2a-url="https://developers.redhat.com/blog/2018/11/27/what-no-python-in-rhel-8-beta/" data-a2a-title="What, No Python in RHEL 8 Beta?"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/27/what-no-python-in-rhel-8-beta/"&gt;What, No Python in RHEL 8 Beta?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-aFPcivt8q8" height="1" width="1" alt=""/&gt;</content><summary>TL;DR Of course we have Python! You just need to specify if you want Python 3 or 2 as we didn’t want to set a default. Give yum install python3 or yum install python2 a try. Or, if you want to see what we recommend you install yum install @python36 or yum install @python27. Read on for why. For prior versions of Red Hat Enterprise Linux, and most Linux Distributions, users have been locked to the ...</summary><dc:creator>Langdon White</dc:creator><dc:date>2018-11-27T15:00:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/27/what-no-python-in-rhel-8-beta/</feedburner:origLink></entry><entry><title>Audit log mode applied to all audit data</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eHUFLliYVzQ/audit-log-mode-applied-to-all-audit-data.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Maciej Swiderski</name></author><id>searchisko:content:id:jbossorg_blog-audit_log_mode_applied_to_all_audit_data</id><updated>2018-11-27T13:06:14Z</updated><published>2018-11-27T13:06:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;jBPM allows to store so called audit logs in various modes&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;JPA (default)&lt;/li&gt;&lt;li&gt;JMS&lt;/li&gt;&lt;li&gt;None&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;JPA&lt;/b&gt; mode means that data will be stored directly and within the same transaction as process execution. That usually have some additional performance overhead although it's certainly not significant and unless huge volume is expected is a sound default setting.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;JMS&lt;/b&gt; mode means that all audit data will be stored in background and the engine will push all required data via JMS layer. That allows to offload main thread from being responsible for storing audit logs and then allow to process more process instances while JMS listener will deal with storing audit logs in background.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;None&lt;/b&gt; mode means that audit logs won't be stored at all, which might make sense in some cases (usually straight through processes) so the audit data is not required. Keep in mind that with disabled audit logs (set to None mode) both jBPM console and Kie Server features are limited as they do rely on audit data.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Until 7.15 audit mode applied only to process related audit data and that consists of&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ProcessInstanceLog&lt;/li&gt;&lt;li&gt;NodeInstanceLog&lt;/li&gt;&lt;li&gt;VariableInstanceLog&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;it has been improved to cover all audit logs that span across processes, user tasks and cases. With that said it covers (in addition to listed above) following&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;AuditTaskImpl&lt;/li&gt;&lt;li&gt;TaskEvent&lt;/li&gt;&lt;li&gt;TaskVariableImpl&lt;/li&gt;&lt;li&gt;CaseFileDataLog&lt;/li&gt;&lt;li&gt;CaseRoleAssignmentLog&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;BAMTaskSummary is not covered with audit mode except for NONE mode which also disables BAM logging.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Configuration&lt;/h3&gt;&lt;div&gt;JPA and NONE mode do not require additional configuration and can be used directly after installation. JMS does need a bit of configuration to allow to take advantage of JMS layer.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This sample configuration assumes the runtime environment is based on WildFly (or EAP) as application server.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Enable JMS queue creation in kie-server-jms.xml&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div&gt;First you need to enable dedicated JMS queue for sending audit data through. To do so, go to &amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;kie-server.war/META-INF&lt;/span&gt; and edit &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;kie-server-jms.xml&lt;/span&gt; file. Locate the commended queue named&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;KIE.SERVER.AUDIT&lt;/span&gt; and uncomment the entire queue configuration, it should look like&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;messaging-deployment xmlns="urn:jboss:messaging-activemq-deployment:1.0"&amp;gt;&lt;br /&gt; &amp;lt;server name="default"&amp;gt;&lt;br /&gt; &amp;lt;jms-destinations&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- Kie Server REQUEST queue --&amp;gt;&lt;br /&gt; &amp;lt;jms-queue name="KIE.SERVER.REQUEST"&amp;gt;&lt;br /&gt; &amp;lt;entry name="queue/KIE.SERVER.REQUEST" /&amp;gt;&lt;br /&gt; &amp;lt;entry name="java:jboss/exported/jms/queue/KIE.SERVER.REQUEST" /&amp;gt;&lt;br /&gt; &amp;lt;/jms-queue&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- Kie Server RESPONSE queue --&amp;gt;&lt;br /&gt; &amp;lt;jms-queue name="KIE.SERVER.RESPONSE"&amp;gt;&lt;br /&gt; &amp;lt;entry name="queue/KIE.SERVER.RESPONSE" /&amp;gt;&lt;br /&gt; &amp;lt;entry name="java:jboss/exported/jms/queue/KIE.SERVER.RESPONSE" /&amp;gt;&lt;br /&gt; &amp;lt;/jms-queue&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- Kie Server EXECUTOR queue --&amp;gt;&lt;br /&gt; &amp;lt;jms-queue name="KIE.SERVER.EXECUTOR"&amp;gt;&lt;br /&gt; &amp;lt;entry name="queue/KIE.SERVER.EXECUTOR" /&amp;gt;&lt;br /&gt; &amp;lt;/jms-queue&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- JMS queue for signals --&amp;gt;&lt;br /&gt; &amp;lt;!-- enable when external signals are required --&amp;gt;&lt;br /&gt; &amp;lt;!--&lt;br /&gt; &amp;lt;jms-queue name="KIE.SERVER.SIGNAL.QUEUE"&amp;gt;&lt;br /&gt; &amp;lt;entry name="queue/KIE.SERVER.SIGNAL" /&amp;gt;&lt;br /&gt; &amp;lt;entry name="java:jboss/exported/jms/queue/KIE.SERVER.SIGNAL" /&amp;gt;&lt;br /&gt; &amp;lt;/jms-queue&amp;gt;&lt;br /&gt; --&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- JMS queue for audit --&amp;gt;&lt;br /&gt; &amp;lt;!-- enable when jms mode for audit is required --&amp;gt;&lt;br /&gt; &amp;lt;!----&amp;gt;&lt;br /&gt; &amp;lt;jms-queue name="KIE.SERVER.AUDIT"&amp;gt;&lt;br /&gt; &amp;lt;entry name="queue/KIE.SERVER.AUDIT"/&amp;gt;&lt;br /&gt; &amp;lt;entry name="java:jboss/exported/jms/queue/KIE.SERVER.AUDIT"/&amp;gt;&lt;br /&gt; &amp;lt;/jms-queue&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;/jms-destinations&amp;gt;&lt;br /&gt; &amp;lt;/server&amp;gt;&lt;br /&gt;&amp;lt;/messaging-deployment&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;Enable message listener in ejb-jar.xml&lt;/h4&gt;Next, go to &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;kie-server.war/WEB-INF&lt;/span&gt; and edit &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ejb-jar.xml&lt;/span&gt; file. Locate &amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CompositeAsyncAuditLogReceiver&lt;/span&gt; and uncomment entire section for that message driven bean. Also uncomment the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;enterprise-beans&lt;/span&gt; tags for the document.&lt;br /&gt;It should look like below&lt;br /&gt;&lt;pre class="brush:xml"&gt;&lt;br /&gt;&amp;lt;ejb-jar id="ejb-jar_ID" version="3.1"&lt;br /&gt; xmlns="http://java.sun.com/xml/ns/javaee"&lt;br /&gt; xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt; xsi:schemaLocation="http://java.sun.com/xml/ns/javaee&lt;br /&gt; http://java.sun.com/xml/ns/javaee/ejb-jar_3_1.xsd"&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!----&amp;gt;&lt;br /&gt; &amp;lt;enterprise-beans&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- enable when external signals are required and queue and connection factory is defined&lt;br /&gt; &amp;lt;message-driven&amp;gt;&lt;br /&gt; &amp;lt;ejb-name&amp;gt;JMSSignalReceiver&amp;lt;/ejb-name&amp;gt;&lt;br /&gt; &amp;lt;ejb-class&amp;gt;org.jbpm.process.workitem.jms.JMSSignalReceiver&amp;lt;/ejb-class&amp;gt;&lt;br /&gt; &amp;lt;transaction-type&amp;gt;Bean&amp;lt;/transaction-type&amp;gt;&lt;br /&gt; &amp;lt;activation-config&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-name&amp;gt;destinationType&amp;lt;/activation-config-property-name&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-value&amp;gt;javax.jms.Queue&amp;lt;/activation-config-property-value&amp;gt;&lt;br /&gt; &amp;lt;/activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-name&amp;gt;destination&amp;lt;/activation-config-property-name&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-value&amp;gt;java:/queue/KIE.SERVER.SIGNAL&amp;lt;/activation-config-property-value&amp;gt;&lt;br /&gt; &amp;lt;/activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;/activation-config&amp;gt;&lt;br /&gt; &amp;lt;/message-driven&amp;gt;&lt;br /&gt; --&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- enable when jms mode for audit is required and queue and connection factory is defined--&amp;gt;&lt;br /&gt; &amp;lt;message-driven&amp;gt;&lt;br /&gt; &amp;lt;ejb-name&amp;gt;CompositeAsyncAuditLogReceiver&amp;lt;/ejb-name&amp;gt;&lt;br /&gt; &amp;lt;ejb-class&amp;gt;org.jbpm.kie.services.impl.CompositeAsyncAuditLogReceiver&amp;lt;/ejb-class&amp;gt;&lt;br /&gt; &amp;lt;transaction-type&amp;gt;Container&amp;lt;/transaction-type&amp;gt;&lt;br /&gt; &amp;lt;activation-config&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-name&amp;gt;destinationType&amp;lt;/activation-config-property-name&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-value&amp;gt;javax.jms.Queue&amp;lt;/activation-config-property-value&amp;gt;&lt;br /&gt; &amp;lt;/activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-name&amp;gt;destination&amp;lt;/activation-config-property-name&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-value&amp;gt;java:/queue/KIE.SERVER.AUDIT&amp;lt;/activation-config-property-value&amp;gt;&lt;br /&gt; &amp;lt;/activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-name&amp;gt;maxSession&amp;lt;/activation-config-property-name&amp;gt;&lt;br /&gt; &amp;lt;activation-config-property-value&amp;gt;1&amp;lt;/activation-config-property-value&amp;gt;&lt;br /&gt; &amp;lt;/activation-config-property&amp;gt;&lt;br /&gt; &amp;lt;/activation-config&amp;gt;&lt;br /&gt; &amp;lt;/message-driven&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!----&amp;gt;&lt;br /&gt; &amp;lt;/enterprise-beans&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/ejb-jar&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Configure JMS related config for audit logs&lt;/h4&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;Lastly, go to &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;kie-server.war/WEB-INF/classes&lt;/span&gt; and rename the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;wildfly-&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;jbpm.audit.jms.properties&lt;/span&gt; to&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;jbpm.audit.jms.properties&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;And that's all that is required to make use of JMS audit logging in jBPM. For other applications servers, make sure to create JMS queue (and then refer to it in ejb-jar.xml file) according to application server guides for JMS.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eHUFLliYVzQ" height="1" width="1" alt=""/&gt;</content><summary>jBPM allows to store so called audit logs in various modes JPA (default) JMS None JPA mode means that data will be stored directly and within the same transaction as process execution. That usually have some additional performance overhead although it's certainly not significant and unless huge volume is expected is a sound default setting. JMS mode means that all audit data will be stored in back...</summary><dc:creator>Maciej Swiderski</dc:creator><dc:date>2018-11-27T13:06:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/11/audit-log-mode-applied-to-all-audit-data.html</feedburner:origLink></entry><entry><title>Solving the challenges of debugging microservices on a container platform</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WN2mw_EF06Q/" /><category term="ansible" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="debugging" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="istio" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="opentracing" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="service mesh" scheme="searchisko:content:tags" /><category term="Squash" scheme="searchisko:content:tags" /><category term="Telepresence" scheme="searchisko:content:tags" /><author><name>Didier Wojciechowski</name></author><id>searchisko:content:id:jbossorg_blog-solving_the_challenges_of_debugging_microservices_on_a_container_platform</id><updated>2018-11-27T13:00:13Z</updated><published>2018-11-27T13:00:13Z</published><content type="html">&lt;p&gt;Microservices have become mainstream in the enterprise. This proliferation of &lt;a href="http://rhdp-drupal.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; applications generates new problems, which requires a new approach to managing problems. A microservice is a small, independently deployable, and independently scalable software service that is designed to encapsulate a specific semantic function in the larger application&lt;a href="#references"&gt;&lt;sup&gt;l&lt;/sup&gt;&lt;/a&gt;. This article explores several approaches to deploying tools to debug microservices applications on a &lt;a href="http://rhdp-drupal.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; platform like &lt;a href="https://developers.redhat.com/products/openshift/overview/"&gt;Red Hat OpenShift&lt;/a&gt;, including &lt;a href="https://developers.redhat.com/blog/2017/07/10/using-opentracing-with-jaeger-to-collect-application-metrics-in-kubernetes/"&gt;OpenTracing&lt;/a&gt;,  Squash, Telepresence, and creating a Squash Operator in &lt;a href="https://www.redhat.com/en/technologies/management/ansible"&gt;Red Hat Ansible Automation&lt;/a&gt;.&lt;span id="more-533687"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Expect challenges and changes on the microservices journey&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;A typical traditional monolithic application consists of a single process. It is easy to attach a debugger to this process to have a complete view of the runtime state of the application. In contrast, a microservices application can be composed of hundreds of processes. The main problem with debugging and finding the root cause in a distributed system is being able to recreate the state of the system when the error occurred so that you can obtain a holistic view. For this reason, troubleshooting is more difficult in a microservices environment, &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Importantly, identifying the root cause of issues in microservices application can have a direct business impact. &lt;/span&gt;In fact, &lt;strong&gt;40%&lt;/strong&gt;&lt;a href="#references"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; to &lt;strong&gt;90%&lt;/strong&gt;&lt;a href="#references"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; of total software costs of are typically incurred after launch. It is important to knowing the right techniques and to deploying the right debugging tools in order to reduce time and money spent to correct software code.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Technical challenges with microservices applications&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Microservices applications present unique challenges. Communication between services is asynchronous and not reliable, making errors difficult to reproduce. Moreover, s&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;ervices often interact with one another intermittently. The fine-grained approach to developing microservices lets developers choose the best language and framework for a specific job. As such, microservices can be written in different languages, and may be running across several different nodes. Together, these properties can make transactions difficult to step through.&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 30px;"&gt;&lt;em&gt;&lt;span style="font-weight: 400;"&gt;“&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Debugging microservices applications is a difficult task. The state of the application is spread across multiple microservices, and it’s hard to get a holistic view of the state of the application.  &lt;/span&gt;&lt;/em&gt;&lt;span style="font-weight: 400;"&gt;&lt;em&gt;Currently, debugging of microservices is often assisted by &lt;a href="http://opentracing.io/"&gt;OpenTracing&lt;/a&gt;, which helps in tracing of a transaction or workflow for postmortem analysis and more recently by &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;service meshes&lt;/a&gt; like &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt;, which monitor the network to identify latency problems in real-time. However, these tools do not allow you to monitor and interfere with the application during runtime&amp;#8221;&lt;/em&gt; (&lt;a href="https://github.com/solo-io/squash"&gt;solo.io&lt;/a&gt;).&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;OpenTracing&lt;/span&gt;&lt;/h2&gt; &lt;p style="text-align: left;"&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://opentracing.io"&gt;OpenTracing&lt;/a&gt; is an API specification for distributed tracing, and is the third hosted Cloud Native Computing Foundation (CNCF) project after Kubernetes and Prometheus. Jaeger is one of the most well-known OpenTracing implementations, and it is the distributed tracing solution used by &lt;a href="https://istio.io/docs/tasks/telemetry/distributed-tracing/"&gt;Istio for Telemetry&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p style="text-align: left;"&gt;&lt;span style="font-weight: 400;"&gt;OpenTracing is often considered to be resource intensive, and logging the state of an application during runtime can result in a performance overhead. The BLOG &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://medium.com/opentracing/take-opentracing-for-a-hotrod-ride-f6e3141f7941"&gt;Take OpenTracing for a HotROD Ride&lt;/a&gt; details the optimization of a HotRod ride app developed by Uber (see screenshot below). The article involves successive optimizations of a Go-based Ride-on-Demand demonstration service, all informed by tracing data.&lt;/span&gt;&lt;/p&gt; &lt;h6 style="text-align: center;"&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;img class=" alignnone size-full wp-image-533717 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.42.46-1024x336.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.42.46.png" alt="" width="1466" height="481" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.42.46.png 1466w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.42.46-300x98.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.42.46-768x252.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.42.46-1024x336.png 1024w" sizes="(max-width: 1466px) 100vw, 1466px" /&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Picture 1 : HotRod Ride apps developed by Uber&lt;br /&gt; &lt;/span&gt;&lt;/h6&gt; &lt;h3 style="text-align: left;"&gt;&lt;span style="font-weight: 400;"&gt;Running OpenTracing in OpenShift&lt;/span&gt;&lt;/h3&gt; &lt;p style="text-align: left;"&gt;&lt;span style="font-weight: 400;"&gt;To run the HotRod example in OpenShift, execute the steps below:&lt;/span&gt;&lt;/p&gt; &lt;p class="selectionShareable" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;&lt;code class="notranslate"&gt;$ oc new-project jaeger-demo&lt;/code&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code class="notranslate"&gt;$ oc process -f https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/all-in-one/jaeger-all-in-one-template.yml | oc create -f -&lt;/code&gt;&lt;br /&gt; &lt;code class="notranslate"&gt;$ oc import-image jaegertracing/example-hotrod:1.6 --confirm&lt;/code&gt;&lt;br /&gt; &lt;code class="notranslate"&gt;$ oc process -f https://raw.githubusercontent.com/dwojciec/debugging-microservices/master/jaeger/hotrod-app.yml | oc create -f -&lt;/code&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-533737 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.55.26-1024x480.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.55.26.png" alt="" width="1467" height="688" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.55.26.png 1467w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.55.26-300x141.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.55.26-768x360.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-17.55.26-1024x480.png 1024w" sizes="(max-width: 1467px) 100vw, 1467px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://github.com/jaegertracing/jaeger/tree/master/examples/hotrod/cmd"&gt;Source code for HotROD apps&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;h4&gt;&lt;span style="font-weight: 400;"&gt;Pros of this approach include:&lt;/span&gt;&lt;/h4&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Logging &amp;#8211; easy to output to any logging tool&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Context propagation &amp;#8211; use baggage to carry request and user ID’s, etc.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Critical path analysis &amp;#8211; drill down into request latency&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;System topology analysis &amp;#8211; identify bottlenecks due to shared resource&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Metrics/alerting &amp;#8211; measure based on tags, span time, log data&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;&lt;span style="font-weight: 400;"&gt;Cons of this approach include:&lt;/span&gt;&lt;/h4&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;OpenTracing does not provide run-time debugging&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;OpenTracing requires wrapping and changing the code&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;It is impossible to change variable values in runtime&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;The process is expansive, requiring repeatedly modifying and testing the application&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Squash&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Squash allows runtime debugging on distributed applications and is integrated with integrated development environments (IDEs) such as Visual Studio code and IntelliJ. Squash is deployed to the cluster as a server and a DaemonSet, with your IDE acting as the Squash UI. Once the applications’ pods have been retrieved, use your IDE to attach to one of the running pods where you can select the service on which to start your debug session.&lt;br /&gt; &lt;img class=" alignnone size-full wp-image-533747 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.06.30-1024x616.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.06.30.png" alt="" width="1632" height="981" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.06.30.png 1632w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.06.30-300x180.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.06.30-768x462.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.06.30-1024x616.png 1024w" sizes="(max-width: 1632px) 100vw, 1632px" /&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;More information regarding &lt;/span&gt;&lt;a href="https://github.com/solo-io/squash/blob/master/docs/techincal-overview.md"&gt;&lt;span style="font-weight: 400;"&gt;Squash solution architecture&lt;/span&gt;&lt;/a&gt; is available.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;With Squash, you can:&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;• Perform live debugging across multiple microservices&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;• Debug a container in a pod&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;• Debug a service&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;• Set breakpoints&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;• Step through the code&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;• View and modify values of variables&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt; &lt;h3 style="text-align: left;"&gt;&lt;span style="font-weight: 400;"&gt;Running Squash in Openshift&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400; color: #333333;"&gt;Prerequisites :&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; Use Openshift version 3.9 as higher versions are not yet tested. For versions higher than 3.9 you have to change the version of the squash image (from v0.2.1 to v0.3.1).&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;br /&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://hub.docker.com/r/soloio/squash-server/tags/"&gt;Squash-server&lt;/a&gt; and &lt;a href="https://hub.docker.com/r/soloio/squash-client/tags/"&gt;squash-client&lt;/a&gt; images are available.&lt;/span&gt;&lt;/p&gt; &lt;h4&gt;&lt;span style="font-weight: 400;"&gt;To deploy a Squash application in OpenShift, follow the steps below:&lt;/span&gt;&lt;/h4&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ oc new-project squash&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ oc process -f https://raw.githubusercontent.com/dwojciec/debugging-microservices/master/squash/squash-template.yaml -l name=squash | oc create -f -&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ oc adm policy add-scc-to-user privileged -z squash-client&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ oc get route&lt;/span&gt; &lt;/pre&gt; &lt;h4&gt;&lt;span style="font-weight: 400;"&gt;The Squash command-line interface (CLI) can be &lt;a href="https://github.com/solo-io/squash/tree/master/docs/install#command-line-interface-cli"&gt;installed locally&lt;/a&gt;. Additional information on the &lt;a href="https://github.com/solo-io/squash/blob/master/docs/cli.md"&gt;Squash CLI&lt;/a&gt; is available&lt;br /&gt; &lt;/span&gt;&lt;/h4&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ export SQUASH_SERVER_URL=&amp;#60;route exposed&amp;#62;/api/v2 $ squash list a State |ID |Debugger |Image |Debugger Address&lt;/span&gt; &lt;/pre&gt; &lt;h4&gt;&lt;span style="font-weight: 400;"&gt;Install a Squash plugin for the appropriate IDE (&lt;a href="https://github.com/solo-io/squash/blob/master/docs/IDEs.md#ides"&gt;Visual Studio code and Intellij&lt;/a&gt;) and &lt;a href="https://github.com/solo-io/squash-vscode/blob/master/docs/example-app-kubernetes.md"&gt;setup the IDE&lt;/a&gt;.&lt;/span&gt;&lt;/h4&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-533787 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.20.05-1024x733.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.20.05.png" alt="" width="1055" height="755" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.20.05.png 1055w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.20.05-300x215.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.20.05-768x550.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.20.05-1024x733.png 1024w" sizes="(max-width: 1055px) 100vw, 1055px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-533797 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.21.32-1024x632.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.21.32.png" alt="" width="1174" height="725" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.21.32.png 1174w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.21.32-300x185.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.21.32-768x474.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.21.32-1024x632.png 1024w" sizes="(max-width: 1174px) 100vw, 1174px" /&gt;&lt;/p&gt; &lt;h4&gt;&lt;span style="font-weight: 400;"&gt;Deploy a sample application to use Squash.&lt;/span&gt;&lt;/h4&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ oc new-project demo-squash&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ oc process -f https://raw.githubusercontent.com/dwojciec/debugging-microservices/master/squash/demo-squash.yaml | oc create -f -&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Note:&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; I added an &lt;/span&gt;&lt;a href="https://docs.openshift.com/container-platform/3.10/install_config/configuring_routing.html"&gt;&lt;span style="font-weight: 400;"&gt;annotation&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; on the route definition &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;haproxy.router.openshift.io/timeout: 5m to debug the application.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; &lt;h4&gt;&lt;span style="font-weight: 400;"&gt;Clone the application locally on your system.&lt;/span&gt;&lt;/h4&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ git clone https://github.com/solo-io/squash.git&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ cd squash/contrib/example&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ code ~/squash/contrib/example/service1/&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ idea ~/squash/contrib/example/service2-java&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Restart pod of the demo application to release any debug attachment&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ oc delete pod --all --grace-period=0 -n demo-squash &lt;/span&gt;&lt;/pre&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Telepresence&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Telepresence offers another alternative to debuging code deployed on a Kubernetes cluster. &lt;/span&gt;&lt;a href="https://www.telepresence.io/"&gt;&lt;span style="font-weight: 400;"&gt;Telepresence&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; is currently a &lt;/span&gt;&lt;a href="https://landscape.cncf.io/cncf=sandbox"&gt;&lt;span style="font-weight: 400;"&gt;sandbox project at the CNCF&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Using Telepresence on Openshift is presented &lt;/span&gt;&lt;a href="https://www.telepresence.io/tutorials/openshift"&gt;&lt;span style="font-weight: 400;"&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and in a blog post titled “&lt;/span&gt;&lt;a href="https://blog.openshift.com/telepresence-local-development/"&gt;&lt;span style="font-weight: 400;"&gt;Telepresence for local developement&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;”.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;References to go further: &lt;/span&gt;&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.weave.works/blog/debugging-and-troubleshooting-microservices-in-kubernetes"&gt;&lt;span style="font-weight: 400;"&gt;Debugging and Troubleshooting Microservices in Kubernetes with Ray Tsang (Google)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.weave.works/blog/debugging-microservices-squash-vs-telepresence"&gt;&lt;span style="font-weight: 400;"&gt;Debugging microservices &amp;#8211; Squash vs. Telepresence&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://kubernetes.io/blog/2018/05/01/developing-on-kubernetes/"&gt;&lt;span style="font-weight: 400;"&gt;Developing on Kubernetes&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://itnext.io/development-and-debugging-with-kubernetes-296bb60d9549"&gt;&lt;span style="font-weight: 400;"&gt;Development and Debugging with Kubernetes&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://jaxenter.com/rookout-debug-kubernetes-151062.html"&gt;Rookout: breakpoints for Kubernetes ?&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Debugging techniques:&lt;/span&gt;&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.infoq.com/presentations/google-debug-microservices"&gt;&lt;span style="font-weight: 400;"&gt;Debugging Microservices: How Google SREs Resolve Outages&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://thenewstack.io/debugging-microservices-lessons-from-google-facebook-lyft/"&gt;&lt;span style="font-weight: 400;"&gt;Debugging Microservices: Lessons from Google, Facebook, Lyft&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/08/16/troubleshooting-java-applications-on-openshift/"&gt;&lt;span style="font-weight: 400;"&gt;Troubleshooting Java applications on OpenShift&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://itnext.io/debug-a-go-application-in-kubernetes-from-ide-c45ad26d8785"&gt;&lt;span style="font-weight: 400;"&gt;Debug a Go Application in Kubernetes from IDE&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; (The Hard Way).&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Creating a Squash Ansible Operator&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Based on the&lt;/span&gt;&lt;a href="https://github.com/operator-framework/operator-sdk/blob/master/doc/ansible/user-guide.md"&gt;&lt;span style="font-weight: 400;"&gt; User Guide&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; which walks through an example of building a simple memcached-Operator powered by Ansible tools and librairies provided by the Operator SDK, I decided to build my Squash Operator. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://github.com/dwojciec/squash-operator"&gt;Source code&lt;/a&gt; is available.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;An Operator is a Kubernetes controller that deploys and manages an application’s resources and services in Kubernetes. In Kubernetes each of your application’s resources can be defined by a custom resource definition (CRD). CRDs uniquely identify your applications custom resources by its Group, Version, and Kind in a Kubernetes cluster. Once the CRDs have been created, you would then create an instance of the custom resource, or CR, with a unique name.&lt;br /&gt; &lt;img class=" alignnone size-full wp-image-533867 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.42.14-1024x543.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.42.14.png" alt="" width="1260" height="668" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.42.14.png 1260w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.42.14-300x159.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.42.14-768x407.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.42.14-1024x543.png 1024w" sizes="(max-width: 1260px) 100vw, 1260px" /&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;span style="font-weight: 400;"&gt;Create a new operator&lt;/span&gt;&lt;/h3&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ $GOPATH/bin/operator-sdk --version&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;operator-sdk version 0.0.6+git&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ mkdir -p -p $GOPATH/src/github.com/squash-operator/&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ cd $GOPATH/src/github.com/squash-operator/&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The Operator SDK provides an option to create an Ansible Operator. An Ansible Operator leverages the full power of Ansible and it does not require the knowledge or the experience of any other programming language like GO or Java. You simply write some Ansible code and edit a few YAML files to get your Operator up and running.&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ $GOPATH/bin/operator-sdk new squash-operator --api-version=app.example.com/v1alpha1 --kind=Squash --type=ansible&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;operator-sdk version 0.0.6+git&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Create squash-operator/tmp/init/galaxy-init.sh&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Create squash-operator/tmp/build/Dockerfile&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Create squash-operator/tmp/build/test-framework/Dockerfile&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Create squash-operator/tmp/build/go-test.sh&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Rendering Ansible Galaxy role [squash-operator/roles/Squash]...&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Cleaning up squash-operator/tmp/init&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Create squash-operator/watches.yaml&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Create squash-operator/deploy/rbac.yaml Create squash-operator/deploy/crd.yaml &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Create squash-operator/deploy/cr.yaml &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Create squash-operator/deploy/operator.yaml &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Run git init ... &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Initialized empty Git repository in /Users/dwojciec/go/src/github.com/squash-operator/squash-operator/.git &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Run git init done &lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;cd&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; squash-operator&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ tree . ├── deploy │   ├── cr.yaml │   ├── crd.yaml │   ├── operator.yaml │   └── rbac.yaml ├── roles │   └── Squash │       ├── README.md │       ├── defaults │       │ └── main.yml │       ├── files │       ├── handlers │       │ └── main.yml │       ├── meta │       │ └── main.yml │       ├── tasks │       │ └── main.yml │       ├── templates │       ├── tests │       │ ├── inventory │       │ └── test.yml │       └── vars │           └── main.yml ├── tmp │   └── build │       ├── Dockerfile │       ├── go-test.sh │       └── test-framework │           └── Dockerfile └── watches.yaml 14 directories, 16 files &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-533897 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.43-1024x523.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.43.png" alt="" width="1252" height="640" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.43.png 1252w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.43-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.43-768x393.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.43-1024x523.png 1024w" sizes="(max-width: 1252px) 100vw, 1252px" /&gt;&lt;br /&gt; &lt;img class=" alignnone size-full wp-image-533887 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.51-1024x435.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.51.png" alt="" width="1273" height="541" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.51.png 1273w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.51-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.51-768x326.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-05-at-18.52.51-1024x435.png 1024w" sizes="(max-width: 1273px) 100vw, 1273px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Once all the code is generated by the Operator SDK. Go to the deploy directory to check the content of all files.&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ pwd &lt;/span&gt; &lt;span style="font-weight: 400;"&gt;/Users/dwojciec/go/src/github.com/squash-operator/squash-operator/deploy&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ tree . ├── cr.yaml ├── crd.yaml ├── operator.yaml └── rbac.yaml 0 directories, 4 files &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;I updated rbac.yaml with &lt;a href="https://raw.githubusercontent.com/dwojciec/squash-operator/master/deploy/rbac.yaml"&gt;this code&lt;/a&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;. Check the content of the rbac.yaml file because by default the namespace used is the &lt;/span&gt;&lt;b&gt;default&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; one for &lt;/span&gt;&lt;b&gt;ClusterRoleBinding&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; and you may want to use a different project to deploy your application. In my case I deployed my Operator in a project I created named &lt;/span&gt;&lt;b&gt;operator-squash&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; . I added and created a &lt;/span&gt;&lt;a href="https://raw.githubusercontent.com/dwojciec/squash-operator/master/deploy/sa.yaml"&gt;&lt;span style="font-weight: 400;"&gt;sa.yaml&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; file to define &lt;/span&gt;&lt;b&gt;ServiceAccount&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; for my application &lt;/span&gt;&lt;b&gt;squash-operator&lt;/b&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;span style="font-weight: 400;"&gt;Building the Squash Ansible Role&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The first thing to do is to modify the generated Ansible role under &lt;/span&gt;&lt;b&gt;&lt;i&gt;roles/Squash&lt;/i&gt;&lt;/b&gt;&lt;span style="font-weight: 400;"&gt;. This Ansible Role controls the logic that is executed when a resource is modified.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;I updated the empty file&lt;/span&gt; &lt;a href="https://raw.githubusercontent.com/dwojciec/squash-operator/master/roles/Squash/tasks/main.yml"&gt;&lt;b&gt;roles/Squash/tasks/main.yaml&lt;/b&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; with the following:&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt; --- # tasks file for squash-server - name: start squash-server k8s: definition: kind: Deployment apiVersion: apps/v1 metadata: name: squash-server namespace: '{{ meta.namespace }}' spec: selector: matchLabels: app: squash-server template: metadata: labels: app: squash-server spec: containers: - name: squash-server image: soloio/squash-server:v0.2.1 - name: start squash-client k8s: state: present definition: "{{ lookup('template', '/opt/ansible/k8s/squash-client.yml') | from_yaml }}" - name: create squash-server service k8s: state: present definition: "{{ lookup('template', '/opt/ansible/k8s/squash-server-svc.yml') | from_yaml }}" &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This Ansible task is creating a Kubernetes deployment using the &lt;a href="https://docs.ansible.com/ansible/2.6/modules/k8s_module.html"&gt;k8s Ansible module&lt;/a&gt; which &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;allows you to easily interact with the kubernetes resources idempotently. &lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;span style="font-weight: 400;"&gt;Update of the Dockerfile (tmp/build/Dockerfile)&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Inside the &lt;/span&gt;&lt;b&gt; &lt;/b&gt;&lt;a href="https://raw.githubusercontent.com/dwojciec/squash-operator/master/roles/Squash/tasks/main.yml"&gt;&lt;b&gt;roles/Squash/tasks/main.yaml&lt;/b&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;  file I’m using multiples external files such as &amp;#8216;/opt/ansible/k8s/squash-server-svc.yml&amp;#8217;. To consume these files I updated the Dockerfile to add them.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;I updated squash-operator/tmp/build/Dockerfile from:&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;FROM quay.io/water-hole/ansible-operator COPY roles/ ${HOME}/roles/ COPY watches.yaml ${HOME}/watches.yaml&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;To:&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;FROM quay.io/water-hole/ansible-operator COPY k8s/ ${HOME}/k8s/ COPY roles/ ${HOME}/roles/ COPY playbook.yaml ${HOME}/playbook.yaml COPY watches.yaml ${HOME}/watches.yaml&lt;/span&gt; &lt;/pre&gt; &lt;h3&gt;&lt;span style="font-weight: 400;"&gt;Update the the watches.yaml file&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;By default the Operator SDK generated &lt;/span&gt;&lt;b&gt;watches.yaml&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; file watches Squash resource events and executes Ansible &lt;/span&gt;&lt;b&gt;Role&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; Squash.&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt; $ cat watches.yaml --- - version: v1alpha1 group: app.example.com kind: Squash role: /opt/ansible/roles/Squash&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;I decided to use the &lt;/span&gt;&lt;b&gt;Playbook&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; option by specifying a&lt;/span&gt;&lt;b&gt;&lt;i&gt; playbook.yaml&lt;/i&gt;&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; file inside &lt;/span&gt;&lt;b&gt;&lt;i&gt;watch.yaml &lt;/i&gt;&lt;/b&gt;&lt;span style="font-weight: 400;"&gt;which will configure the operator to use this specified path when launching ansible-runner with the Ansible Playbook.&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt; --- - version: v1alpha1 group: app.example.com kind: Squash playbook: /opt/ansible/playbook.yaml finalizer: name: finalizer.app.example.com vars: sentinel: finalizer_running&lt;/span&gt; &lt;/pre&gt; &lt;h3&gt;&lt;span style="font-weight: 400;"&gt;Build and run the Operator&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Before running the Squash Operator, Kubernetes needs to know about the new CRD the Operator will be watching.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Deploy the CRD as follows:&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt; $ oc new-project operator-squash $ kubectl create -f deploy/crd.yaml&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Then build the squash-operator image and push it to a registry.&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt; $ $GOPATH/bin/operator-sdk build quay.io/dwojciec/squash-operator:v0.0.1 $ docker push quay.io/dwojciec/squash-operator:v0.0.1&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Kubernetes deployment manifests are generated in &lt;b&gt;deploy/operator.yaml&lt;/b&gt;. The deployment image in this file needs to be modified from the placeholder REPLACE_IMAGE to the previous built image. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Edit &lt;b&gt;deploy/operator.yaml&lt;/b&gt; file and change :&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt; spec: containers: - name: squash-operator image: REPLACE_IMAGE ports: To&lt;/span&gt;&lt;/pre&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;spec: containers: - name: squash-operator image: quay.io/dwojciec/squash-operator:v0.0.1 ports: &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Finally, deploy the squash-operator.&lt;/span&gt;&lt;/p&gt; &lt;pre class="notranslate" style="padding-left: 30px;"&gt;&lt;span style="font-weight: 400;"&gt;$ kubectl create -f deploy/rbac.yaml $ kubectl create -f deploy/operator.yaml $ kubectl create -f deploy/sa.yaml&lt;/span&gt;&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Thanks for reading this article. I hope you found interesting information. And if you want to deep dive I encourage you to go further and I&amp;#8217;m sharing some links below.&lt;/p&gt; &lt;p&gt;&lt;span style="font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;"&gt;Consult these references to go further:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://opensource.com/article/18/10/ansible-operators-kubernetes"&gt;&lt;span style="font-weight: 400;"&gt;An introduction to Ansible Operators in Kubernetes&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Smk9oQp7YMY"&gt;&lt;span style="font-weight: 400;"&gt;Memcached Ansible Operator Demo&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;a id="references"&gt;&lt;/a&gt;References&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://go.lightstep.com/global-microservices-trends-report-2018"&gt;Global Microservices Trends: a survey of Development Professionals April 2018&lt;/a&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://www.oreilly.com/library/view/facts-and-fallacies/0321117425/"&gt;Facts and Fallacies of Software Engineering, &lt;/a&gt;&lt;a href="https://www.oreilly.com/library/view/facts-and-fallacies/0321117425/"&gt;Glass, R , &lt;/a&gt;&lt;a href="https://www.oreilly.com/library/view/facts-and-fallacies/0321117425/"&gt;Addison-Wesley Professional, 2002, p 115&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://dx.doi.org/10.5455%2FAIM.2012.21.63-66"&gt;Which Factors Affect Software Projects Maintenance Cost More? &lt;/a&gt;&lt;a href="https://dx.doi.org/10.5455%2FAIM.2012.21.63-66"&gt;Dehaghani, S.M.H.,  Hajrahimi, N.&lt;/a&gt;&lt;a href="https://dx.doi.org/10.5455%2FAIM.2012.21.63-66"&gt;, Informatica Medica, 2013&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#38;linkname=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F27%2Fmicroservices-debugging-openshift-kubernetes%2F&amp;#038;title=Solving%20the%20challenges%20of%20debugging%20microservices%20on%20a%20container%20platform" data-a2a-url="https://developers.redhat.com/blog/2018/11/27/microservices-debugging-openshift-kubernetes/" data-a2a-title="Solving the challenges of debugging microservices on a container platform"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/27/microservices-debugging-openshift-kubernetes/"&gt;Solving the challenges of debugging microservices on a container platform&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WN2mw_EF06Q" height="1" width="1" alt=""/&gt;</content><summary>Microservices have become mainstream in the enterprise. This proliferation of microservices applications generates new problems, which requires a new approach to managing problems. A microservice is a small, independently deployable, and independently scalable software service that is designed to encapsulate a specific semantic function in the larger applicationl. This article explores several app...</summary><dc:creator>Didier Wojciechowski</dc:creator><dc:date>2018-11-27T13:00:13Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/27/microservices-debugging-openshift-kubernetes/</feedburner:origLink></entry><entry><title>Announcing: Full Spring Boot support for Red Hat OpenShift Application Runtimes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fYMDjf4bwmY/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="RHOAR" scheme="searchisko:content:tags" /><category term="Spring" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><category term="Spring Cloud" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-announcing_full_spring_boot_support_for_red_hat_openshift_application_runtimes</id><updated>2018-11-26T20:23:23Z</updated><published>2018-11-26T20:23:23Z</published><content type="html">&lt;h2&gt;What Red Hat is providing&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt; (RHOAR) is a recommended set of products, tools, and components for developing and maintaining cloud-native applications on the &lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt; platform. As part of this offering, Red Hat provides full support for developers using Spring Boot and related frameworks for building modern, production-grade, Java-based cloud-native applications.&lt;/p&gt; &lt;p&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_tomcat_runtime_guide/"&gt;Spring Boot&lt;/a&gt; lets you create opinionated Spring-based standalone applications. The Spring Boot runtime also integrates with the OpenShift platform, allowing your services to externalize their configuration, implement health checks, provide resiliency and failover, and much more. To learn more about how Spring Boot applications integrate with the wider Red Hat portfolio, check out the following OpenShift Commons Briefing by &lt;a href="https://twitter.com/tqvarnst"&gt;Thomas Qvarnstrom&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;span id="more-540867"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/wQ9QSvc0qi8?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Versioning&lt;/h2&gt; &lt;p&gt;Red Hat is initially supporting Spring Boot &lt;strong&gt;1.5.17 &lt;/strong&gt;on Red Hat OpenShift. Support for Spring Boot 2.1 is planned for early 2019. Spring Boot 2.1 adds additional features and frameworks, but many Spring Boot 1.5.x applications remain in production today, so supporting both is critical for our existing customers and wider development communities.&lt;/p&gt; &lt;h2&gt;Support details&lt;/h2&gt; &lt;p&gt;The Spring ecosystem contains many popular frameworks for building various application types. When used with RHOAR, support from Red Hat is limited to those frameworks primarily targeting modern cloud-native &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservice&lt;/a&gt; applications, along with frameworks originating from upstream open source communities that Red Hat actively participates in or leads. The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html-single/red_hat_openshift_application_runtimes_release_notes/#maven-artifacts-spring-boot-tested-and-verified"&gt;list on this documentation page&lt;/a&gt; shows exactly what is included, and it will be updated for 1.5.17 in the coming weeks. Red Hat customers can also refer to the &lt;a href="https://access.redhat.com/articles/3710221"&gt;Spring Boot support page on the customer portal&lt;/a&gt; for additional detail.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a quick rundown of the type of support included with this offering:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Configuration support&lt;/strong&gt;. Red Hat will help customers with Spring Boot configuration so it runs properly on OpenShift. This is no different from helping customers properly configure Red Hat products.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Workaround support&lt;/strong&gt;. As with any product, if a Spring Boot application is not working as developers assumed it should, but in reality, it is actually working as defined, then in these cases, Red Hat will work with a customer to help find another means of achieving a solution.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Product integration support&lt;/strong&gt;. RHOAR’s Spring Boot support includes support for many Red Hat–led open source frameworks and platforms. Some examples include &lt;a href="https://openshift.com"&gt;OpenShift&lt;/a&gt;, &lt;a href="https://tomcat.apache.org"&gt;Tomcat&lt;/a&gt;, &lt;a href="http://undertow.io/"&gt;Undertow&lt;/a&gt;, and &lt;a href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat Single Sign-On/Keycloak&lt;/a&gt;. This list continues to grow over time as Red Hat continues to integrate Spring Boot with more of Red Hat’s product portfolio.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;New feature requests&lt;/strong&gt;. Red Hat will entertain Red Hat product feature requests to optimize Red Hat product usage with Spring Boot applications. When reasonable to do so, Red Hat will work upstream within the Spring community to advocate on a customer’s behalf for requested Spring Boot functionality.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Bug fixes&lt;/strong&gt;. When bugs have been identified in Spring code, Red Hat will work on addressing those bugs. For non-critical issues, Red Hat will work in the upstream Spring community to address the issue. When an issue is addressed within the Spring community, the fix may be available in a future Spring update. For critical &lt;a href="https://access.redhat.com/support/policy/severity/"&gt;&lt;em&gt;severity 1&lt;/em&gt;&lt;/a&gt; issues that Red Hat can immediately address, Red Hat may provide the customer an immediate fix to get them up and running as quickly as possible while also working to address the issue in the Spring community. Red Hat wants to stay true to the Spring community distribution. For issues that cannot be addressed within the Spring community, Red Hat offers &lt;em&gt;Workaround Support&lt;/em&gt; (see above).&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Additional considerations&lt;/h3&gt; &lt;p&gt;Red Hat provides binaries only for those Spring frameworks that it leads and distributes (for example, Undertow, Hibernate, embedded Tomcat, Keycloak, and Apache CXF). Other components are still distributed via their normal channels (for example, Maven Central). These components are consumed via Spring Boot &lt;em&gt;Starters&lt;/em&gt;.&lt;/p&gt; &lt;h2&gt;Launching into OpenShift&lt;/h2&gt; &lt;p&gt;The following figure shows launching Spring Boot applications into OpenShift:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.17.25-PM.png"&gt;&lt;img class=" aligncenter wp-image-540907 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.17.25-PM-1024x515.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.17.25-PM-1024x515.png" alt="Launching Spring Boot Applications into OpenShift" width="640" height="322" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.17.25-PM-1024x515.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.17.25-PM-300x151.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.17.25-PM-768x386.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Using &lt;a href="https://developers.redhat.com/launch"&gt;developers.redhat.com/launch&lt;/a&gt; you can immediately create and deploy a Spring Boot application directly to &lt;a href="http://openshift.com/"&gt;Red Hat OpenShift Online&lt;/a&gt; or to your own local OpenShift cluster. It provides a hassle-free way of creating example applications, called &lt;em&gt;boosters&lt;/em&gt;, as well as an easy way to build and deploy those boosters to OpenShift.&lt;/p&gt; &lt;p&gt;Boosters are available to showcase how developers can use Spring Boot to build fundamental building blocks of cloud-native applications and services, such as creating secured RESTful APIs, implementing health checks, externalizing configuration, or integrating with the OpenShift Service Mesh based on the &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt; project.&lt;/p&gt; &lt;h2&gt;Test driving a sample app using Spring Boot&lt;/h2&gt; &lt;p&gt;Spring Boot is a Java framework, and as such, it can be run using &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;OpenJDK&lt;/a&gt;. Let&amp;#8217;s test drive one of the Spring Boot boosters on OpenShift. (Here I am using the &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt;, but any OpenShift cluster will do.) The following is one set of commands you could use to pull the OpenJDK image to your local system for use with Spring Boot:&lt;/p&gt; &lt;pre&gt;oc new-project spring-boot oc import-image java:8 --from=registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift --confirm&lt;/pre&gt; &lt;p&gt;Then, the following commands could be used to build and deploy the Spring Boot application to Red Hat OpenShift:&lt;/p&gt; &lt;pre&gt;oc new-app --name rest-example 'java:8~https://github.com/snowdrop/spring-boot-http-booster#1.5.17-4-redhat' oc expose svc/rest-example&lt;/pre&gt; &lt;p&gt;You can watch the build take place:&lt;/p&gt; &lt;pre&gt;oc logs -f bc/rest-example&lt;/pre&gt; &lt;p&gt;Once the build completes, wait for the deployment to finish:&lt;/p&gt; &lt;pre&gt;oc rollout status -w dc/rest-example&lt;/pre&gt; &lt;p&gt;And then access the sample app&amp;#8217;s UI:&lt;/p&gt; &lt;pre&gt;open http://$(oc get route rest-example -o jsonpath='{.spec.host}{"\n"}')&lt;/pre&gt; &lt;p&gt;Red Hat customers using the OpenJDK distribution to run Spring Boot applications will be able to keep current with the latest updates, security advisories, knowing when and why containers are updated, and remaining up to date on the latest available tagged OpenJDK image.&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;The RHOAR team has been continuously adding to and improving the official documentation for developers creating Spring Boot applications. This includes updates in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/red_hat_openshift_application_runtimes_release_notes/"&gt;Release Notes&lt;/a&gt;, &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/getting_started_with_red_hat_openshift_application_runtimes/"&gt;Getting Started Guide,&lt;/a&gt; and the new &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_runtime_guide/"&gt;Spring Boot Runtime Guide&lt;/a&gt;. (Note that the guide is in the process of being updated for the latest version.)&lt;/p&gt; &lt;h2&gt;Developer interactive learning scenarios&lt;/h2&gt; &lt;p&gt;These &lt;a href="https://learn.openshift.com/middleware/courses/middleware-spring-boot/"&gt;self-paced scenarios&lt;/a&gt; provide you with a pre-configured OpenShift instance, accessible from your browser without any downloads or configuration. Use it to experiment with building Spring Boot applications on OpenShift and building applications with various Spring frameworks and Red Hat technologies. The following figure shows interactive learning scenarios on learn.openshift.com:&lt;/p&gt; &lt;p&gt;&lt;a href="http://learn.openshift.com"&gt;&lt;img class=" aligncenter wp-image-540937 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.27.43-PM-1024x504.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.27.43-PM-1024x504.png" alt="Interactive learning scenarios on learn.openshift.com" width="640" height="315" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.27.43-PM-1024x504.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.27.43-PM-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-11-25-at-4.27.43-PM-768x378.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Getting support for Spring Boot&lt;/h2&gt; &lt;p&gt;Support for Spring Boot is available to Red Hat customers through a subscription to &lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt;. Contact your local Red Hat representative or &lt;a href="https://www.redhat.com/en/about/contact/sales"&gt;Red Hat Sales&lt;/a&gt; for details on how you can enjoy world-class support offered from Red Hat and its worldwide partner network.&lt;/p&gt; &lt;p&gt;Moving forward, customers can expect support for Spring Boot and other RHOAR runtimes according to the &lt;a href="https://access.redhat.com/support/policy/updates/jboss_notes/"&gt;Red Hat Product Update and Support Lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;What’s next for Spring Boot support?&lt;/h2&gt; &lt;p&gt;The RHOAR Spring Boot team is continually taking &lt;a href="https://issues.jboss.org/projects/SB"&gt;feedback&lt;/a&gt; from customers and the wider community of open source developers, as well as tracking the &lt;a href="https://github.com/spring-projects/spring-boot/releases"&gt;upstream Spring Boot releases&lt;/a&gt;. They are working to make updates to RHOAR based on that feedback, as well as considering support for additional modules from Red Hat and the very large Java community.&lt;/p&gt; &lt;h2&gt;The people behind Red Hat&amp;#8217;s Spring Boot support&lt;/h2&gt; &lt;p&gt;This offering was produced by Red Hat’s RHOAR product and engineering team and involved many hours of development, testing, writing documentation, testing some more, and working with the wider Red Hat community of customers, partners, and Spring developers to incorporate contributions, both big and small. We are glad you have chosen to use it and hope that it meets or exceeds your expectations!&lt;/p&gt; &lt;h2&gt;Spring Boot resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat OpenShift Application Runtimes Developer home page&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_runtime_guide/"&gt;Spring Boot Runtime Guide&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/projects/SB/issues/SB-344?filter=allopenissues"&gt;Spring Boot Issue Tracker&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://learn.openshift.com/middleware/courses/middleware-spring-boot/"&gt;Interactive Learning Scenarios for Spring Boot on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/launch"&gt;RHOAR launcher&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fannouncing-full-spring-boot-support-for-red-hat-openshift-application-runtimes%2F&amp;#038;title=Announcing%3A%20Full%20Spring%20Boot%20support%20for%20Red%20Hat%20OpenShift%20Application%20Runtimes" data-a2a-url="https://developers.redhat.com/blog/2018/11/26/announcing-full-spring-boot-support-for-red-hat-openshift-application-runtimes/" data-a2a-title="Announcing: Full Spring Boot support for Red Hat OpenShift Application Runtimes"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/26/announcing-full-spring-boot-support-for-red-hat-openshift-application-runtimes/"&gt;Announcing: Full Spring Boot support for Red Hat OpenShift Application Runtimes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fYMDjf4bwmY" height="1" width="1" alt=""/&gt;</content><summary>What Red Hat is providing Red Hat OpenShift Application Runtimes (RHOAR) is a recommended set of products, tools, and components for developing and maintaining cloud-native applications on the Red Hat OpenShift platform. As part of this offering, Red Hat provides full support for developers using Spring Boot and related frameworks for building modern, production-grade, Java-based cloud-native appl...</summary><dc:creator>James Falkner</dc:creator><dc:date>2018-11-26T20:23:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/26/announcing-full-spring-boot-support-for-red-hat-openshift-application-runtimes/</feedburner:origLink></entry><entry><title>The Non-complexity of /etc/nsswitch.conf</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3K2ZU84SogE/" /><category term="community" scheme="searchisko:content:tags" /><category term="fedora" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="future" scheme="searchisko:content:tags" /><category term="glibc" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="nsswitch.conf" scheme="searchisko:content:tags" /><category term="opinion" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="upstream" scheme="searchisko:content:tags" /><author><name>DJ Delorie</name></author><id>searchisko:content:id:jbossorg_blog-the_non_complexity_of_etc_nsswitch_conf</id><updated>2018-11-26T12:00:26Z</updated><published>2018-11-26T12:00:26Z</published><content type="html">&lt;p&gt;In most glibc-based operating systems, there&amp;#8217;s a file &lt;tt&gt;/etc/nsswitch.conf&lt;/tt&gt; that most people ignore, few people understand, but all people generally rely on. This file determines where the system finds things like host names, passwords, and protocol numbers. Does your company use LDAP? NIS? Plain files? The nsswitch file (it stands for &amp;#8220;name services switch&amp;#8221;) tells the system what service to use for each type of name lookup.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a snippet from a sample &lt;tt&gt;/etc/nsswitch.conf&lt;/tt&gt; file:&lt;/p&gt; &lt;pre&gt;passwd: files nis group: files nis hosts: files dns myhostname &lt;/pre&gt; &lt;p&gt;In this example, user information (the passwd and group services) come first from &amp;#8220;files&amp;#8221; (like &lt;tt&gt;/etc/passwd&lt;/tt&gt; or &lt;tt&gt;/etc/group)&lt;/tt&gt;, and if no entries are found there, a query to an NIS server (configured elsewhere) will be used. Host information first comes from &lt;tt&gt;/etc/hosts&lt;/tt&gt; (files), then a DNS server (dns), and if neither of those work, at least a fallback of &amp;#8220;myhostname&amp;#8221; so that the local machine has &lt;em&gt;some&lt;/em&gt; name.&lt;/p&gt; &lt;p&gt;The non-complexity comes in the &amp;#8220;and if that doesn&amp;#8217;t work&amp;#8221; rule. When multiple services are listed, they&amp;#8217;re tried in order, and a sevice either succeeds or fails. If it fails, the next is tried, etc. There&amp;#8217;s a way to check for a few other cases (entry not found, or service temporarily unavailable) but the only thing you can do based on those is either try the next service, or don&amp;#8217;t.&lt;/p&gt; &lt;p&gt;This simplicity has already led to one drawback, which is the handling of a user&amp;#8217;s groups when there are both local groups and global (LDAP for example) groups. You wouldn&amp;#8217;t want to have to choose between the two, you&amp;#8217;d rather be allowed into the union of the two sets of groups. The &lt;tt&gt;nsswitch.conf&lt;/tt&gt; syntax has a special case for that:&lt;/p&gt; &lt;pre&gt;groups: files [SUCCESS=merge] ldap &lt;/pre&gt; &lt;p&gt;Normally, a successful lookup would terminate the lookup and return a value. This special case says that even if the &amp;#8220;files&amp;#8221; lookup worked, try the &amp;#8220;ldap&amp;#8221; service &lt;em&gt;also&lt;/em&gt; and merge the two lists of groups together. Another special case has come up recently, with systemd providing some services for the local machine. The problem here is &amp;#8220;local machine&amp;#8221; &amp;#8211; it doesn&amp;#8217;t provide global services, but the nsswitch syntax doesn&amp;#8217;t allow for &amp;#8220;delegation&amp;#8221;. If the systemd service doesn&amp;#8217;t find a record, is that &amp;#8220;not found&amp;#8221; authoritative?&lt;/p&gt; &lt;p&gt;And what if you wanted different services for different domains? Currently, your only option is to configure a local DNS server that has all the logic for domain delegation, and refer to that in &lt;tt&gt;nsswitch.conf&lt;/tt&gt;. That only works if the DNS server is running, which may not be the case when the machine is first booting, and may not be easy to configure when you change networks (wifi? vpn?).&lt;/p&gt; &lt;p&gt;So what&amp;#8217;s the point of this article? I&amp;#8217;ve been contemplating the non-complexity of this file, and wondering what its future might contain. What if you could select services based on a pattern match of the search string? What if it could test for outside conditions like time of day, or VPNs? What if your corporate security rules required a more deterministic failure mode? I&amp;#8217;m not suggesting &lt;tt&gt;nsswitch.conf&lt;/tt&gt; become some full programming language (&lt;tt&gt;nsswitch.py&lt;/tt&gt; anyone? &lt;img src="https://s.w.org/images/core/emoji/2.4/72x72/1f609.png" alt="" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt; but if it had &lt;em&gt;some&lt;/em&gt; decision-making syntax beyond what it already has, what would it look like? What kinds of problems would it solve? Do &lt;em&gt;you&lt;/em&gt; have any problems that could be solved by a more flexible &lt;tt&gt;nsswitch.conf&lt;/tt&gt;? If so, share them in the comments below!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#38;linkname=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F26%2Fetc-nsswitch-conf-non-complexity%2F&amp;#038;title=The%20Non-complexity%20of%20%2Fetc%2Fnsswitch.conf" data-a2a-url="https://developers.redhat.com/blog/2018/11/26/etc-nsswitch-conf-non-complexity/" data-a2a-title="The Non-complexity of /etc/nsswitch.conf"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/26/etc-nsswitch-conf-non-complexity/"&gt;The Non-complexity of /etc/nsswitch.conf&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3K2ZU84SogE" height="1" width="1" alt=""/&gt;</content><summary>In most glibc-based operating systems, there’s a file /etc/nsswitch.conf that most people ignore, few people understand, but all people generally rely on. This file determines where the system finds things like host names, passwords, and protocol numbers. Does your company use LDAP? NIS? Plain files? The nsswitch file (it stands for “name services switch”) tells the system what service to use for ...</summary><dc:creator>DJ Delorie</dc:creator><dc:date>2018-11-26T12:00:26Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/26/etc-nsswitch-conf-non-complexity/</feedburner:origLink></entry><entry><title>Modern Business Logic Tooling Workshop - Lab 01 Installing Decision Manager</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Gx6pRtOSKpY/modern-business-logic-tooling-workshop-lab01.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-modern_business_logic_tooling_workshop_lab_01_installing_decision_manager</id><updated>2018-11-26T06:00:04Z</updated><published>2018-11-26T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/#/1" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;" target="_blank"&gt;&lt;img alt="decision manager workshops" border="0" data-original-height="540" data-original-width="1163" height="148" src="https://1.bp.blogspot.com/-gQXmtNq_U1U/W-67dz2AgPI/AAAAAAAAtSw/EntAce063ush2Zv69LoSqNPpvBNSyVJ-ACLcBGAs/s320/Screenshot%2B2018-11-15%2Bat%2B10.30.58.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Click to start the workshop&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Recently I've started updating my &lt;a href="https://bpmworkshop.gitlab.io/#/" target="_blank"&gt;free online rules and process automation workshops&lt;/a&gt; that showcase how to get started using modern business logic tooling.&lt;br /&gt;&lt;br /&gt;These updates start with moving from JBoss BRMS to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager.&lt;br /&gt;&lt;br /&gt;This article highlights the first lab update for Red Hat Decision Manager, where you learn to install the Decision Manager on your laptop.&lt;br /&gt;&lt;br /&gt;Let's take a look at the lab shall we?&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Lab 01 - Installation&lt;/h3&gt;This lab is the first step on learning to develop a rules based project. It's all about getting the Decision Manager installed locally on your laptop for running the rest of the workshop.&lt;br /&gt;&lt;br /&gt;The easiest way is to just &lt;a href="https://bpmworkshop.gitlab.io/rhdm/lab01.html#/1" target="_blank"&gt;jump right into lab 01&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhdm/lab01.html#/1" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Comments or feedback on any part of the workshop that might not be clear, just reach out.&lt;br /&gt;&lt;br /&gt;Stay tuned for the next lab update, coming soon!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ngDmYELPDZI:3xfdvWpaxEI:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ngDmYELPDZI:3xfdvWpaxEI:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ngDmYELPDZI:3xfdvWpaxEI:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ngDmYELPDZI:3xfdvWpaxEI:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ngDmYELPDZI:3xfdvWpaxEI:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ngDmYELPDZI:3xfdvWpaxEI:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ngDmYELPDZI:3xfdvWpaxEI:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ngDmYELPDZI:3xfdvWpaxEI:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ngDmYELPDZI:3xfdvWpaxEI:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ngDmYELPDZI:3xfdvWpaxEI:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ngDmYELPDZI:3xfdvWpaxEI:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ngDmYELPDZI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Gx6pRtOSKpY" height="1" width="1" alt=""/&gt;</content><summary>Click to start the workshopRecently I've started updating my free online rules and process automation workshops that showcase how to get started using modern business logic tooling. These updates start with moving from JBoss BRMS to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager. This article highlights the first lab update for Red Hat Decision Manager, whe...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-11-26T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ngDmYELPDZI/modern-business-logic-tooling-workshop-lab01.html</feedburner:origLink></entry><entry><title>Hibernate Community Newsletter 23/2018</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Kz7zJs6sIzw/" /><category term="Discussions" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="newsletter" scheme="searchisko:content:tags" /><author><name>Vlad Mihalcea</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_community_newsletter_23_2018</id><updated>2018-11-23T10:22:29Z</updated><published>2018-11-23T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="articles"&gt;&lt;a class="anchor" href="#articles"&gt;&lt;/a&gt;Articles&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Since Hibernate 5, the &lt;code&gt;GenerationType.AUTO&lt;/code&gt; identifier strategy is handled by the &lt;code&gt;SequenceStyleGenerator&lt;/code&gt;. If the underlying database supports sequences, then a database sequence is going to be used to generate the entity identifier. Otherwise, the &lt;code&gt;TABLE&lt;/code&gt; generator will be used, and this can cause performance and scalability issue, as illustrated by &lt;a href="https://sybrenbolandit.nl/2018/11/23/hibernate-id-generation-strategies/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Therefore, if you’re using MySQL you are better off using the IDENTITY generator. If database portability is your concern, then you can use the &lt;code&gt;SEQUENCE&lt;/code&gt; generator by default since it is supported by Oracle, SQL Server 2012, PostgreSQL and MariaDB 10.3, and just fall back to IDENTITY using the &lt;code&gt;orm.xml&lt;/code&gt; for MySQL. For more details about how you can override an annotation-based mapping using XML configs, check out &lt;a href="https://vladmihalcea.com/how-to-replace-the-table-identifier-generator-with-either-sequence-or-identity-in-a-portable-way/"&gt;this article&lt;/a&gt; as well.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Anghel Leonard wrote an article where he covers over 50 JPA and Hibernate performance tips:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://dzone.com/articles/50-best-performance-practices-for-hibernate-5-amp"&gt;Best Performance Practices for Hibernate 5 and Spring Boot 2 (Part 1)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://dzone.com/articles/best-performance-practices-for-hibernate-5-and-spr"&gt;Best Performance Practices for Hibernate 5 and Spring Boot 2 (Part 2)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When working with Hibernate, it’s common to use the Camel Case (e.g. &lt;code&gt;phoneNumber&lt;/code&gt;) notation for entity properties while, on the database side, the Snake Case (e.g. &lt;code&gt;phone_number&lt;/code&gt;) notation is more widespread. Although you could use the &lt;code&gt;@Column&lt;/code&gt; annotation to map each individual entity attribute to its database identifier, it’s much more convenient to use a Hibernate naming strategy that applies all these rules consistently.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://vladmihalcea.com/map-camel-case-properties-snake-case-column-names-hibernate/"&gt;This article&lt;/a&gt; introduces the &lt;code&gt;CamelCaseToSnakeCaseNamingStrategy&lt;/code&gt; which is available via the &lt;a href="https://github.com/vladmihalcea/hibernate-types"&gt;hibernate-types&lt;/a&gt; open-source project.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In &lt;a href="https://www.baeldung.com/jpa-error-java-lang-string-cannot-be-cast"&gt;this article&lt;/a&gt;, Eugen Paraschiv shows you how to fix the &lt;code&gt;java.lang.String cannot be cast to [Ljava.lang.String&lt;/code&gt; error when using JPA and Hibernate.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The JPA specification provides a dual meaning for the &lt;code&gt;DISTINCT&lt;/code&gt; keyword in a JPQL or Criteria API query. While passing the &lt;code&gt;DISTINCT&lt;/code&gt; keyword is fine for scalar queries, you don’t want to do that for entity queries where &lt;code&gt;DISTINCT&lt;/code&gt; is only used after the JDBC &lt;code&gt;ResultSet&lt;/code&gt; is assembled in a parent-child tree representation. To prevent passing the &lt;code&gt;DISTINCT&lt;/code&gt; keyword to the SQL query, you should use the &lt;a href="https://vladmihalcea.com/jpql-distinct-jpa-hibernate/"&gt;&lt;code&gt;HINT_PASS_DISTINCT_THROUGH&lt;/code&gt;&lt;/a&gt; JPA query hint.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hibernate 5.4 provides a way to build JPA EntityGraphs from a String representation. For more details about this new feature, check out &lt;a href="https://thoughts-on-java.org/parse-string-into-entitygraph/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="time-to-upgrade"&gt;&lt;a class="anchor" href="#time-to-upgrade"&gt;&lt;/a&gt;Time to upgrade&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/11/15/hibernate-orm-540-cr1-out/"&gt;Hibernate ORM 5.4.0 CR1&lt;/a&gt; has been released. This is the first release of the 5.4 version, so we are looking forward to getting your feedback about the latest features we integrated into the framework. For more details, check out the &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31691&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;release notes&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/11/22/hibernate-search-5-10-5-Final/"&gt;Hibernate Search 5.10.5&lt;/a&gt; has been released. For more details, check out the &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10061&amp;amp;version=31717"&gt;release notes&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="questions-and-answers"&gt;&lt;a class="anchor" href="#questions-and-answers"&gt;&lt;/a&gt;Questions and answers&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/42830497/select-distinct-on-jpa/53406130#53406130"&gt;Select DISTINCT on JPA&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/hibernate-case-when-expression-not-using-arithmetic-operation/1671"&gt;Hibernate CASE WHEN expression not using arithmetic operation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-soft-delete-a-child-entity-to-allow-the-client-to-review-it-before-it-finally-gets-deleted/1695"&gt;How to soft delete a child entity to allow the client to review it before it finally gets deleted&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/23764528/persistenceunitinfo-appname-has-transactiontype-jta-but-does-not-have-a-jtada/23768775#23768775"&gt;PersistenceUnitInfo [appName&lt;/a&gt; has transactionType JTA, but does not have a jtaDataSource defined]&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/9667703/jpa-implementing-model-hierarchy-mappedsuperclass-vs-inheritance/47197591#47197591"&gt;JPA: Implementing Model Hierarchy - @MappedSuperclass vs. @Inheritance&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/25681386/hibernate-entity-fields-camelcase-database-underscore/53293897#53293897"&gt;How to map Hibernate entity fields using camelCase to snake_case (underscore) database identifiers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/switch-database-dynamically-at-runtime/1700/6"&gt;How to switch database dynamically at runtime&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/1346181/using-distinct-in-jpa/53406102#53406102"&gt;Using DISTINCT in JPA&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/onetoone-mapping-giving-attempted-to-assign-id-from-null-one-to-one-property-error/1777/2"&gt;Hibernate throws “org.hibernate.id.IdentifierGenerationException: attempted to assign id from null one-to-one property [com.newModel.Compensation.order&lt;/a&gt;”]&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/deprecation-of-hibernate-criteria-and-how-it-we-can-still-prevent-it/788/16"&gt;Deprecation of Hibernate Criteria and how we can still prevent it&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-transfer-embedded-pkey-from-grand-parent-to-grand-child-onetomany-mapping-using-crud/1755/19"&gt;How to transfer the embedded identifier from a grandparent to a grandchild &lt;code&gt;@OneToMany&lt;/code&gt; mapping using Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/52950436/how-to-override-hibernate-jpa-filter-on-inherited-class/53373949#53373949"&gt;How to override hibernate JPA filter on inherited class?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/53166546/hibernate-native-sql-query-type-mapping-from-java-sql-date-to-java-time-localdat/53257919#53257919"&gt;Hibernate native SQL query type mapping from java.sql.Date to java.time.LocalDate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access/29004723#29004723"&gt;Hibernate Annotations - Which is better, field or property access?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/30211335/how-to-setup-org-hibernate-org-hibernate-flushmode-for-spring-boot-application/30213835#30213835"&gt;How to set up org.hibernate.org.hibernate.FlushMode for Spring Boot application?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/column-activity-who-entity-is-invalid-in-the-select-list-because-it-is-not-contained-in-either-an-aggregate-function-or-the-group-by-clause-sql-server/1780/2"&gt;Hibernate throws “Column is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause” - SQL Server&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/hibernate-throws-org-hibernate-id-identifiergenerationexception-attempted-to-assign-id-from-null-one-to-one-property-com-newmodel-compensation-order/1777"&gt;Hibernate throws “org.hibernate.id.IdentifierGenerationException: attempted to assign id from null one-to-one property”&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Kz7zJs6sIzw" height="1" width="1" alt=""/&gt;</content><summary>Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users. Articles Since Hibernate 5, the GenerationType.AUTO identifier strategy is handled by the SequenceStyleGenerator. If the underlying database supports sequences, then a database sequence is going to be used to generate the entity identifier. Other...</summary><dc:creator>Vlad Mihalcea</dc:creator><dc:date>2018-11-23T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/11/23/hibernate-community-newsletter-2018-23/</feedburner:origLink></entry><entry><title>Leveraging OpenShift or Kubernetes for automated performance tests (part 1)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0E-EIdl_c04/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="elasticsearch" scheme="searchisko:content:tags" /><category term="EnMasse" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Jaeger" scheme="searchisko:content:tags" /><category term="jenkins" scheme="searchisko:content:tags" /><category term="JMeter" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="opentracing" scheme="searchisko:content:tags" /><category term="performance testing" scheme="searchisko:content:tags" /><category term="prometheus" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="test automation" scheme="searchisko:content:tags" /><author><name>Frédéric Giloux</name></author><id>searchisko:content:id:jbossorg_blog-leveraging_openshift_or_kubernetes_for_automated_performance_tests_part_1</id><updated>2018-11-22T10:00:50Z</updated><published>2018-11-22T10:00:50Z</published><content type="html">&lt;p&gt;This is the first article in a series of three articles based on a session I hold at Red Hat Tech Exchange EMEA. In this first article, I present the rationale and approach for leveraging &lt;a href="https://www.openshift.com"&gt;Red Hat OpenShift&lt;/a&gt; or &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; for automated performance testing, give an overview of the setup, and discuss points that are worth considering when executing and analyzing performance tests. I will also say a few words about performance tuning.&lt;/p&gt; &lt;p&gt;In the second article, we will look at building an observability stack, which—beyond the support it provides in production—can be leveraged during performance tests. Open sources projects like Prometheus, Jaeger, Elasticsearch and Grafana will be used for the purpose. The third article will present the details for building an environment for performance testing and automating the execution with JMeter and Jenkins.&lt;/p&gt; &lt;p&gt;&lt;span id="more-533227"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Rationale&lt;/h2&gt; &lt;p&gt;More and more companies are putting significant efforts into reducing the time it takes to bring product innovation to market or for adapting to market and regulation changes. This leads to the surge of &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservice&lt;/a&gt; architectures and &lt;a href="https://developers.redhat.com/topics/devops/"&gt;DevOps&lt;/a&gt; practices.&lt;/p&gt; &lt;p&gt;However, this brings a couple of challenges. With monthly, weekly, or daily releases, it is critical to avoid breaking things when releasing code to production. Tests are a major aspect for building confidence in the code, but they have traditionally required weeks to months of effort, which is unsustainable with the pace of releases we are now talking about. Automation is becoming critical.&lt;/p&gt; &lt;p&gt;Functional tests have historically had a fairly good level of automation through the use of unit tests that run when an application gets built. That is not the case with nonfunctional integration and performance tests. Even though this article focuses on performance aspects, the approach and setup can be reused for nonfunctional and integration aspects.&lt;/p&gt; &lt;h2 id="_setup_overview"&gt;Setup overview&lt;/h2&gt; &lt;p&gt;This figure shows an overview of the setup process:&lt;/p&gt; &lt;p id="PQALPeh"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png"&gt;&lt;img class=" aligncenter wp-image-533387 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png" alt="Overview of the setup process" width="1250" height="528" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png 1250w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-768x324.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png 1024w" sizes="(max-width: 1250px) 100vw, 1250px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id="_application_aspects"&gt;Application aspects&lt;/h3&gt; &lt;p&gt;The application I use for the demonstration is a very simple Camel route consuming messages from a queue and forwarding them to another queue. The application can be configured for injecting some load and latency, but really the interesting part is not the application itself but everything around it.&lt;/p&gt; &lt;p&gt;I decided to use asynchronous communication because that is something I see increasingly with customers who are embracing microservices and event-driven design. It is also interesting because most JMeter and OpenTracing examples and documentation are focused on synchronous calls. Bringing asynchronicity into the picture makes it slightly more complex.&lt;/p&gt; &lt;p&gt;All the application code and instructions for reproducing the setup can be found in &lt;a href="https://github.com/fgiloux/auto-perf-test"&gt;my Github repository&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Configuration externalization&lt;/h3&gt; &lt;p&gt;An important characteristic and the main benefit of container images is that they are immutable. This drastically simplifies the release process and decreases the level of risk inherent to it. Regarding tests, immutability also makes it easy to guarantee that what has been validated is what is promoted to the next environment: from integration to UAT to staging to production, for instance.&lt;/p&gt; &lt;p&gt;For this to work, it is important to externalize environment specific aspects such as the database, message broker addresses, or credentials from the application and the container image. In Kubernetes and OpenShift (Red Hat&amp;#8217;s enterprise distribution of Kubernetes), this can easily be done by using configMaps and secrets. Both work in a similar way, but secrets have additional restrictions for guaranteeing the confidentiality of sensitive information. Data in configMaps and secrets can be injected into a running &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container&lt;/a&gt; either as environment variables or as files mounted into the container file system.&lt;/p&gt; &lt;p&gt;But what about application tuning parameters? By that, I mean things like the number of message consumers, the size of connection pools, etc. These parameters can have a big impact on the behavior of the application in production, which speaks for having them buried in the immutable container image. Remember: we want to promote exactly what we have tested. On the other hand, not being able to modify them during the performance tests (we would need to re-create the image) may slow down or reduce the breadth of the tests that can be run in a period of time.&lt;/p&gt; &lt;p&gt;I see two options:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first option is to comply with the immutable principle and to have the tuning parameters be part of the image. This would need to be supported by a more complex &lt;a href="https://developers.redhat.com/blog/category/ci-cd/"&gt;continuous integration&lt;/a&gt; pipeline. This pipeline would create several images with different tuning parameters.&lt;/li&gt; &lt;li&gt;The second option is more pragmatic. It consists of externalizing these parameters into configMaps as well. To mitigate the risk of releasing something different from what has been tested, the source of the configMaps should be recorded into a version control system such as git or a CMDB and tagged for each release. I recommend not to have these files directly with the code. Having them in a different repository helps with &amp;#8220;promoting&amp;#8221; the configuration in a similar way as we would promote our code without the need to create a new code release when only the configuration has changed. Having separate repositories for each environment (integration, UAT, production) allows us to have a clear picture of what version is running in each environment and to easily promote the code from one to another.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="_observability"&gt;Observability&lt;/h3&gt; &lt;p id="vgrENfs"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc695fb2e2c.png"&gt;&lt;img class=" aligncenter wp-image-533377 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc695fb2e2c.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc695fb2e2c.png" alt="Elasticsearch logo" width="280" height="233" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Running automated performance tests is a great thing, but for them to bring their full value we need to understand how the application behaves when put under load. Leveraging the observability features built for production readiness is a straightforward way of getting this insight: identifying bottlenecks, error states, resource consumption under load, etc. There are three pillars can be used for that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Application metrics, which can be collected through JMX/Jolokia or Prometheus endpoints for instance&lt;/li&gt; &lt;li&gt;Application traces/performance, which can be captured thanks to OpenTracing and Jaeger&lt;/li&gt; &lt;li&gt;Logs, which with OpenShift automatically are aggregated into Elasticsearch and made available for querying and reporting in Kibana when the application writes them to the standard output&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I have also used with some success commercial products covering the first two points. However, as open source projects, Prometheus and Jaeger have the advantage of getting ideas, innovation, and commitment from more than a single company.&lt;/p&gt; &lt;p&gt;We will take a closer look at the setup of the observability layer in my second article.&lt;/p&gt; &lt;h3 id="_broker_and_external_services"&gt;Broker and external services&lt;/h3&gt; &lt;p id="HavRawH"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png"&gt;&lt;img class=" aligncenter wp-image-533347 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png" alt="EnMasse logo" width="231" height="55" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419.png 1000w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419-300x72.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc68afb5419-768x184.png 768w" sizes="(max-width: 231px) 100vw, 231px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Applications rely on an infrastructure to fulfill usual functions such as message brokering here. Load balancing or state persistence are other examples. The challenge introduced by these systems is that they are often shared. The results of performance tests may hence be influenced by external factors. File system reads and writes and network communication may also be influenced. There are, however, a few mitigation strategies:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;We can monitor our infrastructure to see how much load it is handling besides the load created by the application tests and we can identify whether there is contention.&lt;/li&gt; &lt;li&gt;The good thing with automated tests is that we can schedule them at a later point in time and select a time when traffic external to the application is minimal.&lt;/li&gt; &lt;li&gt;We can use infrastructure, which provides good isolation.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Regarding this last point, I like the approach taken by the message broker used in this demo. EnMasse, created with OpenShift in mind from day one, can spawn a new, dedicated broker on demand. We can have it provisioned for the test run and decommissioned afterward. No other application is using the broker, which provides isolation and the decommissioning after test runs ensures minimal resources reservation. Monitoring the broker will also provide confidence that it is not a limiting factor with respect to performance under load.&lt;/p&gt; &lt;h3 id="_test_automation"&gt;Test automation&lt;/h3&gt; &lt;p&gt;For test automation, I am relying on two tools:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;JMeter for load creation&lt;/li&gt; &lt;li&gt;Jenkins for the orchestration&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Both tools can leverage OpenShift and run as containers on it. I will demonstrate how this can be done in my third article.&lt;/p&gt; &lt;h3 id="_jmeter"&gt;JMeter&lt;/h3&gt; &lt;p id="rnfPuEO"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png"&gt;&lt;img class=" aligncenter wp-image-533337 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png" alt="JMeter logo" width="179" height="61" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f.png 521w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc687f4a90f-300x102.png 300w" sizes="(max-width: 179px) 100vw, 179px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Many tools are available for supporting test automation, such as JMeter, Gatling, Locust, Grinder, and Tsung. They provide a robust, scalable, and flexible way to produce test loads. Message templates, test data sets, or load injection patterns can easily be configured. An aspect that I like in JMeter is the possibility to design and experiment tests using its UI and let them run afterward from the command line, which is a must for scheduled tests with higher load. The UI also helps when we need to interact with less-technical staff in the design phase or have them change and refine the test cases once the technical aspects have been settled.&lt;/p&gt; &lt;p&gt;Similar to what has been said for the application, it is advantageous to externalize test parameters (the number of messages, injection rate, duration, etc.) so that different test cases can be run one after the other without human intervention or replicating the test code.&lt;/p&gt; &lt;p&gt;Running JMeter as a container makes its setup easily portable and disposable. OpenShift also allows you to control the resources that are allocated to JMeter and the application and it provides access to a larger resource pool. When the tests are finished, both can be disposed of.&lt;/p&gt; &lt;p&gt;Observability is also relevant for JMeter to make sure that it is not under resource constraints nor is it a limiting factor for performing the tests; shortly stated, it ensures that the thermometer is not broken. Another aspect is that it also helps with measuring performance at boundaries. When you use OpenTracing, it is not enough to know how long the application took to process a message; it is also important to know how long the message waited in the queue before being picked up. Instrumenting JMeter can provide a better approximation of that.&lt;/p&gt; &lt;h3 id="_jenkins"&gt;Jenkins&lt;/h3&gt; &lt;p id="BMGgxbC"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png"&gt;&lt;img class=" aligncenter wp-image-533327 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png" alt="Jenkins logo" width="180" height="180" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69.png 550w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6857d8e69-300x300.png 300w" sizes="(max-width: 180px) 100vw, 180px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For running automated tests it is best to have a conductor. That is what Jenkins is. It will automate&lt;/p&gt; &lt;ul&gt; &lt;li&gt;builds&lt;/li&gt; &lt;li&gt;provisioning of the environment&lt;/li&gt; &lt;li&gt;deployments&lt;/li&gt; &lt;li&gt;the triggering of test execution with various configurations&lt;/li&gt; &lt;li&gt;cleansing/decommissioning&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It may also provide a high-level view of the test results: pass or fail. It also integrates nicely with JMeter to have a quick view of trends. By adding the capability to build from scratch and decommission at the end of the tests, Jenkins provides confidence that what is tested is what was intended and tracked in the version control system.&lt;/p&gt; &lt;p&gt;Jenkins allows us to have the tests run on schedule and/or, for instance, every time a change is committed to the trunk. It is the tool of choice for continuous integration and continuous delivery. It provides the necessary functions for making performance tests a part of automated nonregression testing.&lt;/p&gt; &lt;h2 id="_considerations"&gt;Considerations&lt;/h2&gt; &lt;p&gt;Be aware of the following considerations.&lt;/p&gt; &lt;h3 id="_avoiding_waisting_resources"&gt;Avoiding wasting resources&lt;/h3&gt; &lt;p&gt;Performance tests often require a significant amount of resources because it is best to run the tests in an environment that replicates production. By leveraging OpenShift and Jenkins pipelines, it is possible to create in minutes an environment for the time the tests are run and to decommission it right after. By doing that, we don’t need to mobilize the resources for longer than required, which may mean significant savings in energy and costs.&lt;/p&gt; &lt;h3 id="_repeatability"&gt;Repeatability&lt;/h3&gt; &lt;p&gt;Being able to see the impact of code or configuration changes on performance allows us to understand the trade-offs made by a design or an implementation decision and to react quickly when we don’t feel comfortable with the implications. The delete and re-create approach offers a clean starting point for comparing apples to apples between runs. Moreover, it provides confidence that what is being tested is also what is available and tagged in repositories (code source, configuration, and container registry).&lt;/p&gt; &lt;p&gt;With a highly dynamic platform such as OpenShift, it is important to make sure that the same amount of resources can get mobilized during runs in order to be able to compare them. Therefore, we need to configure the deployments with CPU/memory requests that are equal to the CPU/memory limits. We don’t want to allow any fluctuation of resources based on the load (by other applications) of the nodes where the component instances are running. This differs to what we may have in production where we may want to mobilize as many resources as available.&lt;/p&gt; &lt;p&gt;In a similar way, it is important to limit contention at the broker level, network, or file system, as stated earlier. It is best to monitor the broker, I/O, and NIO during the tests.&lt;/p&gt; &lt;h3 id="_data_set"&gt;Data set&lt;/h3&gt; &lt;p&gt;Latency and throughput are often significantly affected by the data being processed. It is important to have a data set representative of the data in production that can be reused between runs. As to the difference in functional testing, it is not only necessary to account for the diversity of production data but also for the occurrences of specific data sets. It is best to use a real production data set that may have been anonymized if the data is sensitive.&lt;/p&gt; &lt;p&gt;In this respect, Kafka is very interesting with its &amp;#8220;replay&amp;#8221; capability. Its use would, however, require a very different architectural design and test approach, which are out of scope for this article.&lt;/p&gt; &lt;h3 id="_injection_pattern"&gt;Injection pattern&lt;/h3&gt; &lt;p id="aQxuJcE"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188.png"&gt;&lt;img class=" aligncenter wp-image-533317 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188-685x1024.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188.png" alt="Graphic depicting the need to be aware of the injection pattern" width="148" height="221" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188.png 685w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc67a437188-201x300.png 201w" sizes="(max-width: 148px) 100vw, 148px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It is important to know the injection pattern of data in production for creating significant test cases because latency and, to some extent, throughput are affected by it. Is our application processing a batch or streams of messages? Are there strong variations during a day, a minute, or a second? 1.8 million messages per hour is not the same as 30,000 messages per minute or 500 per second. A uniform distribution is not granted. I have seen systems that were performing quite well with 1.8 million messages per hour uniformly distributed, but the SLA was missed for 90% of the messages in real life due to batch injection. It only took 20 minutes to inject the messages and this was happening every hour.&lt;/p&gt; &lt;p&gt;In the opposite way, another system was performing poorly under tests. About 80 messages were injected every second, as fast as the mock component could do. Distributing the messages evenly over the second 90% of the messages met the targeted SLA. This is, by the way, configurable in JMeter.&lt;/p&gt; &lt;p&gt;In case of a greenfield application, assumptions on the injection rate will need to be made and revisited as soon as some experience has been gathered in production.&lt;/p&gt; &lt;h3 id="_measurement_points"&gt;Measurement points&lt;/h3&gt; &lt;p&gt;The following graphics depict how a component is coping with the load. The first shows a component that is coping with the load; the second shows a component that is not coping with the load.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png"&gt;&lt;img class=" aligncenter wp-image-533267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png" alt="Graphic of a component that is coping with the load" width="411" height="185" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d.png 411w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc65e8c735d-300x135.png 300w" sizes="(max-width: 411px) 100vw, 411px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png"&gt;&lt;img class=" aligncenter wp-image-533277 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png" alt="Graphic of a component that is not coping with the load" width="474" height="184" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f.png 474w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc6624e300f-300x116.png 300w" sizes="(max-width: 474px) 100vw, 474px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To get the real picture of how an application is performing, it is important to pay attention to the measurement points. When you are looking at applications using brokerage, the time the message is enqueued is more relevant than the time it is dequeued by the customer (also, both provide valuable information). When the component is not able to cope with the load, the time spent by messages waiting to be processed is affected the most. The above diagrams provide an idea: look for a usual pattern of how the time spent in &amp;#8220;enqueued&amp;#8221; and &amp;#8220;read and processing&amp;#8221; evolve when components get overwhelmed.&lt;/p&gt; &lt;p&gt;There is also quite a lot of confusion on memory consumption with Java applications. The heap size and its utilization ratio is just part of the picture. Metaspace, thread stacks (the default setting may be up to &lt;a href="https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html#wp1024112"&gt;1MB per thread&lt;/a&gt;), may also take a significant part. On top of that, comes the memory utilized at the system level for opened files/sockets, for instance. The memory used at the system level is not that easy to account for due to the way the operating system optimizes its use with sharing and caching. When the application runs inside a container on OpenShift, the values reported by cgroups are the ones to monitor.&lt;/p&gt; &lt;h3 id="_coordinated_omission"&gt;Coordinated omission&lt;/h3&gt; &lt;p&gt;The idea with coordinated omission is that the response time of the system under test may affect the measurement. JMeter is configured with a limited number of threads and also has limited resources. If the call to send messages is blocked for a longer period of time, which also means high latency, that may also prevent JMeter from sending the targeted number of messages during the interval; hence, it will result in getting fewer measurements when the system behaves badly. This would distort the latency percentile and average values that are calculated. This demo aims at validating application (not broker) performance/behavior. There is also the possibility to publish asynchronously and, hence, nonblocking. With this in mind, I can make the following assumptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;JMeter is able to produce the load requested (thanks to the scalability provided by OpenShift)&lt;/li&gt; &lt;li&gt;The broker is able to ingest the messages in a timely fashion (not blocking JMeter)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Interesting resources on coordinated omission and latency measurements are available &lt;a href="http://highscalability.com/blog/2015/10/5/your-load-generator-is-probably-lying-to-you-take-the-red-pi.html"&gt;here&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=lJ8ydIuPFeU"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="_performance_tuning"&gt;Performance tuning&lt;/h2&gt; &lt;p&gt;When reporting on test results, it is handy to have two levels. A simplistic one, which only tells whether the test passed or failed with a high-level view of trends, and a second level, which can leverage the observability and provides valuable information for troubleshooting performance issues or degradation. It is critical to see in a few minutes how the application has performed during tests. If it takes too long for the analysis, the team won’t look at the results on a regular basis. When we talk about performance, we usually look at three aspects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Throughput&lt;/li&gt; &lt;li&gt;Latency&lt;/li&gt; &lt;li&gt;Resource (RAM, CPU, etc.) consumption&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Application stages&lt;/h3&gt; &lt;p id="IlOKldo"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2.png"&gt;&lt;img class=" aligncenter wp-image-533257 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-1024x774.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2.png" alt="A graphic of a question mark" width="141" height="107" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2.png 1707w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-300x227.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-768x581.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc63520eef2-1024x774.png 1024w" sizes="(max-width: 141px) 100vw, 141px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Looking at performance tuning, it is important to understand and decide on what we want to optimize and what we are ready to compromise on. Besides performance versus resource consumption, the application may behave differently during the following phases depending on the choices that have been made:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Startup&lt;/li&gt; &lt;li&gt;Initialization&lt;/li&gt; &lt;li&gt;Steady state&lt;/li&gt; &lt;li&gt;Peak load&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In the past, tuning has usually been done for peak load, the time when the application is most challenged to meet its SLA. Startup and initialization were rare events. Moving to disposable containers, the choice may not be that clear anymore. Considering auto-scaling, cluster rebalancing containers may get stopped and started more frequently. Being able to auto-scale does not help if our application instance needs minutes to start and we have to respond to the load created by the start of a batch producing thousand of messages per seconds. Also, the first messages processed after startup may have a higher latency during the warmup phase (JIT compilation and optimization, pool loading, etc.).&lt;/p&gt; &lt;p&gt;When conducting tests, warming up the application is something that we may want to consider.&lt;/p&gt; &lt;p&gt;In term of tuning, there are several decisions and trade-offs to be made, which will impact throughput and latency at different phases and startup time:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Should all libraries be loaded during startup?&lt;/li&gt; &lt;li&gt;Should connection and other pools be fully populated during startup?&lt;/li&gt; &lt;li&gt;Would SubstrateVM and AOT compilation (reducing startup time and memory consumption at the cost of lower throughput) become an option?&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="_hints"&gt;Tuning hints&lt;/h3&gt; &lt;p id="hzOjFwt"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8.png"&gt;&lt;img class=" aligncenter wp-image-533247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-1024x249.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8.png" alt="Graphic of several screws, where all but one are the same" width="296" height="72" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8.png 2000w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-300x73.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-768x187.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc62d1a7ac8-1024x249.png 1024w" sizes="(max-width: 296px) 100vw, 296px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;There are a few screws that can be adjusted to improve performance. Here is a non-exhaustive list for the application type described in this article:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Message ordering: Guaranteeing message ordering prevents parallelism or requires reordering, which usually has a big impact on performance. It should be done only when it is strictly required. It is often worth investigating where it can be relaxed for part of the processing.&lt;/li&gt; &lt;li&gt;Prefetch strategy: Prefetch is a very useful optimization for throughput. It prevents the application threads from waiting for the message to be fetched from the broker over the network before the message can get processed. With nonexclusive consumers we should, however, pay attention that one instance does not starve the pool of waiting messages; otherwise, we may end up with the funny pattern where instance 1 consumes and process up to, let&amp;#8217;s say, 50 messages (the prefetch size) when instance 2 does nothing followed by instance 2 consuming and processing 50 messages while instance 1 does nothing, and so on.&lt;/li&gt; &lt;li&gt;Threads contention: If we have a multi-threaded application, we need to pay attention to the amount of time the threads spend in blocked or waiting states.&lt;/li&gt; &lt;li&gt;Context-switching: More threads does not mean better throughput. The time spent in context switching may significantly impact performance. We need to be in control of the number of threads created by our application.&lt;/li&gt; &lt;li&gt;Pools, memory retention, and garbage collection: This is a large topic and I can recommend &lt;a href="https://developers.redhat.com/blog/2014/07/15/dude-wheres-my-paas-memory-tuning-javas-footprint-in-openshift-part-1/"&gt;this article&lt;/a&gt;. It should also be noted that changes related to the points previously mentioned may affect any tuning made on garbage collection.&lt;/li&gt; &lt;li&gt;I/O and file system: For several good reasons, a container usually writes to network storage rather than to the local file system. This may introduce additional latency. Asynchronous writes and caching may, for instance, be considered for mitigating the impact.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Thanks for reading this article. I hope you found this first part interesting. The second part will present how observability can easily be built using very successful open source projects. The third and last part will deep dive into test automation and orchestration.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F11%2F22%2Fautomated-performance-testing-kubernetes-openshift%2F&amp;#038;title=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%201%29" data-a2a-url="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/" data-a2a-title="Leveraging OpenShift or Kubernetes for automated performance tests (part 1)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 1)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0E-EIdl_c04" height="1" width="1" alt=""/&gt;</content><summary>This is the first article in a series of three articles based on a session I hold at Red Hat Tech Exchange EMEA. In this first article, I present the rationale and approach for leveraging Red Hat OpenShift or Kubernetes for automated performance testing, give an overview of the setup, and discuss points that are worth considering when executing and analyzing performance tests. I will also say a fe...</summary><dc:creator>Frédéric Giloux</dc:creator><dc:date>2018-11-22T10:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/</feedburner:origLink></entry></feed>
